title: Über Subpixel
created: 2012-12-08T03:00:00+0100

tags: [ deutsch, ux, typography, dev, scala ]
teaser: subpixel.png
template: post.de.tpl


Zum Thema Subpixel-Rendering von Fonts auf Rasterbildschirmen ist vor kurzem
[ein Artikel][rasterizer] im [Webkrauts-Adventskalender][advcal] erschienen.

[In einem Kommentar][subpixel comment] regt sich ein Leser darüber auf, dass das
Beispielbild zur Subpixel-Glättung schlecht gewählt ist. Es wird nicht deutlich,
dass die verschiedenen Farben bei üblichen Display-Panels horizontal
nebeneinander angeordnet sind und durch diese Anordnung theoretisch die
dreifache Auflösung erreicht werden kann.

![Subpixel-Beispiel][source]

Da es gar nicht so ohne weiteres möglich ist, einen Screenshot so zu vergrößern,
dass die Subpixel sichtbar werden, habe ich ein Programm dafür geschrieben:
[Subpixel Illustrator][subpixel illustrator]. Damit lässt sich ein Screenshot im
PNG-Format öffnen und vergrößern.

Der Kern des Programms ist -- dank Scala -- recht kurz:

~~~ scala
def scaleUp(input: BufferedImage, factor: Int) = {
  require(factor > 1, "factor not greater than one")
  require(factor % 3 == 0,
    "factor not divisible by three")

  val width = input.getWidth
  val height = input.getHeight
  val step = factor / 3

  // Erzeuge leeres Bild mit `factor`-facher Größe
  val out = new BufferedImage(input.getWidth * factor,
    input.getHeight * factor,
    BufferedImage.TYPE_INT_RGB)

  // Durchlaufe das Bild Zeilenweise, von links nach
  // rechts
  for {
    _y <- 0 until height
    (yMin, yMax) = (_y * factor, (_y + 1) * factor)
                              // Vergrößere Ausschnitt
    _x <- 0 until width
    (xMin, xMax) = (_x * factor, (_x + 1) * factor)
                              // Vergrößere Ausschnitt
    _rgb = input.getRGB(_x, _y)
                              // Lies RGB-Wert
    y <- yMin until yMax
    x <- xMin until xMax
    component = {
      if (x < xMin + step) _rgb && 0xFF0000
                              // Maskiere Rotanteil
      else if (xMax - step <= x) _rgb && 0x0000FF
                              // Maskiere Blauanteil
      else _rgb && 0x00FF00
                              // Maskiere Grünanteil
    }
  } {
    out.setRGB(x, y, component)
                              // Setze neuen Farbwert
  }

  out
}
~~~

![Das Ergebnis mit 15-facher Vergrößerung][result]


[rasterizer]: http://www.webkrauts.de/artikel/2012/techniken-zur-schriftglaettung-rasterizer
[advcal]: http://www.webkrauts.de/serien/adventskalender/2012
[subpixel comment]: http://www.webkrauts.de/comment/3748#comment-3748
[source]: /log/2012/12/raster-subpixel.png
[subpixel illustrator]: https://github.com/pvorb/subpixel-illustrator
[result]: /log/2012/12/raster-subpixel-improved.png
