<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/res/diego.feed.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="de">
  <title>vorba.ch: Articles</title>
  <subtitle>Paul Vorbach's personal weblog</subtitle>
  <updated>2014-07-16T17:35:30.187Z</updated>
  <id>http://vorb.de/log/feed.xml</id>
  <author>
    <name>Paul Vorbach</name>
  </author>
  <rights>© 2008-2014 Paul Vorbach</rights>
  <link href="http://vorba.ch/"/>
  <link rel="self" href="http://vorba.ch/feed.xml"/>
  <category term="computer"/>
  <category term="web"/>
  <category term="development"/>
  <category term="javascript"/>
  <category term="scala"/>
  <category term="akka"/>
  <icon>http://vorba.ch/favicon.ico</icon>

  <entry>
    <title>Einfaches PHP-CMS</title>
    <link href="http://vorba.ch/2013/einfaches-php-cms.html"/>
    <id>http://vorba.ch/2013/einfaches-php-cms.html</id>
    <updated>2013-03-13T23:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2013/pen-and-notebook.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Ich schreibe gerade ein CMS. In PHP.&lt;/p&gt;
&lt;p&gt;Ja, richtig gehört: PHP. Wie kommt jemand, der täglich mit Node.js, Scala und noch abgefahreneren Sprachen zu tun hat, ausgerechnet auf PHP? Die Antwort ist ganz einfach. Das ganze soll auf jedem noch so günstigen Webspace laufen und das möglichst ohne Konfiguration. Dafür kommt nur PHP in Frage.&lt;/p&gt;
&lt;p&gt;Nachdem ich seit 2011 viel mit neuen Sprachen und Plattformen experimentiert habe, tut es ganz gut, mal wieder einfachstes PHP in den Bildschirm zu meißeln.&lt;/p&gt;
&lt;h2 id=&quot;warum-noch-ein-cms&quot;&gt;Warum &lt;em&gt;noch ein&lt;/em&gt; CMS?&lt;/h2&gt;
&lt;p&gt;Ich habe mir im Zuge eines kleineren privaten Projekts viele verschiedene Systeme angeschaut. Bei jedem CMS habe ich mir gedacht: Das geht auch einfacher.&lt;/p&gt;
&lt;p&gt;Mein Use Case ist eine kleine Website mit einer Hand voll Seiten, die von mir vorgefertigt erstellt werden und danach von angemeldeten Benutzern editiert werden können sollen. Also muss ich es halt selbst machen, es sei den jemand nennt mir in den Kommentaren ein CMS, das genau das tut und nicht wesentlich mehr. &lt;em&gt;Daran glaube ich aber nicht.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hier in ein paar Stichpunkten, was mir so vorschwebt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Websites bestehen aus HTML. Daher wird es einen einzigen Inhaltstyp geben: HTML-Snippets. Diese werden dann über Templates in einer oder mehreren Seite(n) platziert.&lt;/li&gt;
&lt;li&gt;Andere Möglichkeiten zur Definition von Inhalten sind nur noch händisch getippelte HTML- oder PHP-Dateien.&lt;/li&gt;
&lt;li&gt;PHP ist eine Templatesprache. D.h. für Templates wird reines HTML mit eingebettetem PHP verwendet.&lt;/li&gt;
&lt;li&gt;Es wird keinerlei Rechteverwaltung geben. Nach dem Login darf man alles editieren, was existiert. Meiner Meinung stören aufwendige Rechtesysteme meist nur bei der täglichen Arbeit. Hier geht es definitiv ohne.&lt;/li&gt;
&lt;li&gt;Das Backend umfasst nur 2 bis 3 Seiten:
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Eine Editor-Seite, in der man die HTML-Snippets editieren kann&lt;/li&gt;
&lt;li&gt;Eine Liste der Benutzer mit Funktionen zum Hinzufügen und Entfernen&lt;/li&gt;
&lt;li&gt;Eventuell noch zusätzlich ein Formular, in dem man die Templates anpassen kann, sollte man keinen FTP-Zugang o.ä. haben&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Die Editor-Seite wird vielleicht einen WYSIWYG-Editor spendiert bekommen, (der sich abstellen lässt), damit auch HTML-unerfahrene Benutzer das CMS benutzen können. Hier habe ich lange überlegt, ob ich vielleicht nicht lieber stattdessen Markdown anbieten soll. Je länger ich überlege, desto schwerer fällt mir die Wahl. Vielleicht bleibe ich doch bei einfachem Markdown mit Vorschau, wie hier in den Kommentaren. Vielleicht kann mir ja jemand mit Erfahrung in diesem Bereich die Entscheidung erleichtern.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beim Endprodukt kann man dann wohl kaum noch von einem CMS sprechen (denn verwaltet wird ja nicht viel), aber einen anderen Namen habe ich dafür nicht. Website-Editor vielleicht…&lt;/p&gt;
&lt;p&gt;Die Entwicklung am CMS kann im &lt;a href=&quot;https://github.com/pvorb/chx&quot;&gt;GitHub-Repository&lt;/a&gt; verfolgt werden. Ich habe aber gerade erst damit begonnen, also erwartet noch nicht zu viel.&lt;/p&gt;
&lt;p&gt;Meinungen und Ratschläge: Immer her damit!&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="dev"/>

    <category term="php"/>

    <category term="cms"/>

  </entry>

  <entry>
    <title>Die Reichweite von Node.js</title>
    <link href="http://vorba.ch/2013/reichweite-nodejs.html"/>
    <id>http://vorba.ch/2013/reichweite-nodejs.html</id>
    <updated>2013-03-19T01:50:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2013/chart.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Seit letztem Sommer werden in &lt;a href=&quot;http://npmjs.org/&quot;&gt;npm&lt;/a&gt; Download-Statistiken angezeigt. Sieht man sich ein einzelnes Modul an, so werden die Downloads des letzten Tages, der letzten Woche und des letzten Monats angezeigt.&lt;/p&gt;
&lt;p&gt;Das ist ganz nett, aber nicht immer besonders vielsagend. Da npm seine Daten über eine &lt;a href=&quot;http://couchdb.apache.org/&quot;&gt;CouchDB&lt;/a&gt; bezieht, ist eine ansprechende JSON API gleich mit von der Partie. Da die Daten wohldefiniert vorliegen, habe ich mir schon vor gut einem halben Jahr eine kleine Statistik-Seite gebastelt, die aus den Download-Daten drei Balkendiagramme für tägliche, wöchentliche und monatliche Downloads baut: &lt;a href=&quot;http://npm-stat.vorb.de/&quot;&gt;npm-stat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ich möchte aber auf was anderes hinaus:&lt;/p&gt;
&lt;p&gt;Keine Community entwickelt sich derzeit so schnell, wie die von Node.js. Ein paar Kennzahlen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Im Monat werden insgesamt rund 26 Mio. Pakete heruntergeladen.&lt;/li&gt;
&lt;li&gt;Es gibt ca. 25000 Pakete im Index. Das sind bereits fast so viele wie im Python Package Index (ca. 29000) und etwa halb so viele wie auf RubyGems (ca. 53000).&lt;/li&gt;
&lt;li&gt;Wenn mit der gleichen Geschwindigkeit neue Pakete hinzukommen wie bisher, verdoppelt sich diese Zahl innerhalb des nächsten Jahres.&lt;/li&gt;
&lt;li&gt;Im Schnitt wird ein Modul pro Monat 1000 Mal heruntergeladen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Das sind äußerst beeindruckende Zahlen, bedenkt man, dass Node.js erst vier Jahre alt ist und seit rund zwei Jahren so richtig in Fahrt kommt. Vor zwei Jahren habe ich auch mit Node angefangen und seither &lt;a href=&quot;http://npmjs.org/~pvorb&quot;&gt;32 (meist kleinste) Pakete&lt;/a&gt; geschrieben. Das beliebteste der Pakete&lt;a href=&quot;http://vorba.ch/2013/reichweite-nodejs.html#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; wurde &lt;a href=&quot;http://npm-stat.vorb.de/charts.html?package=clone&quot;&gt;im Februar 15800 mal heruntergeladen&lt;/a&gt;. 44 andere Pakete benutzen das Paket und niemend weiß, wie viele andere Projekte außerhalb von npm noch. Sogar Yahoo hat ein &lt;a href=&quot;https://npmjs.org/package/yahoo-arrow&quot;&gt;kleines Testframework geschrieben&lt;/a&gt;, das clone einsetzt.&lt;/p&gt;
&lt;p&gt;Dieser Eintrag kommt zu einer Zeit, zu der ich eher Distanz von Node.js nehme. Es hat unglaublich viele Probleme und Schwachstellen, die die Entwicklung dafür zur Hölle machen können. Dabei ist das Haupt-Problem JavaScript, das sich meiner Ansicht nach nicht für größere Projekte eignet. Aber dazu ein ander mal mehr.&lt;/p&gt;
&lt;p&gt;Trotzdem kann die Entwicklung Spaß machen und die Zahlen sprechen eine eindeutige Sprache. Ich glaube nicht, dass ich ähnliche Download-Zahlen auf einer anderen Plattform erreicht hätte.&lt;/p&gt;
&lt;p&gt;Ich will damit gar niemanden von Node.js überzeugen, aber für so manches Vorhaben mag es gerade wegen des riesigen Vorrats an Modulen und der aktiven Community genau das Richtige Werkzeug sein.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://npmjs.org/package/clone&quot;&gt;clone&lt;/a&gt; kopiert einen beliebigen Wert, ob &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt;, völlig egal, und das rekursiv mit beliebiger Tiefe. Das ist eigentlich nichts weltbewegendes und wird von einigen JS-Frameworks auch angeboten. Einziger Unterschied ist vermutlich, dass &lt;em&gt;clone&lt;/em&gt; auch sog. &lt;em&gt;circular references&lt;/em&gt; korrekt auflöst und mit kopiert. Ich habe es damals während der Arbeiten an &lt;a href=&quot;http://vorba.ch/log/tag/bread.html&quot;&gt;bread&lt;/a&gt; geschrieben. Ich wollte keinen 500-Pfund-Gorilla à la &lt;em&gt;underscore&lt;/em&gt; oder ähnliches im Projekt haben, weil das meiner Meinung gegen den Ansatz von Node.js geht, alles in kleinen Modulen zu halten, die miteinander verknüpft und wiederverwendet werden können.&lt;a href=&quot;http://vorba.ch/2013/reichweite-nodejs.html#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

    </content>

    <category term="deutsch"/>

    <category term="nodejs"/>

  </entry>

  <entry>
    <title>Umzug</title>
    <link href="http://vorba.ch/2013/umzug.html"/>
    <id>http://vorba.ch/2013/umzug.html</id>
    <updated>2013-11-22T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2013/station.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Vergleichsweise still ist dieses Blog in den letzten Tagen von &lt;em&gt;vorb.de&lt;/em&gt; auf die (nicht mehr ganz so) neue Domain &lt;em&gt;vorba.ch&lt;/em&gt; umgezogen. Damit einher gehen Änderungen am Stylesheet (Artikel vor 2013 sehen weiterhin „alt aus“) sowie an der URL-Struktur: Dadurch, dass hier so selten etwas geschrieben wird, gibt es nun keine Unterverzeichnisse für einzelne Monate mehr. Das Verzeichnis &lt;code&gt;log&lt;/code&gt; ist ebenfalls weggefallen – es war schlicht überflüssig. Zudem habe ich die Kommentare auf Disqus umgezogen. Ich hoffe, daran stört sich niemand allzu sehr.&lt;/p&gt;
&lt;p&gt;Das einzige Feature, welches noch fehlt, ist die alte Suchfunktion. Dafür soll bald eine bessere Variante auf &lt;a href=&quot;http://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt;-Basis kommen.&lt;/p&gt;
&lt;p&gt;Zukünftig soll hier auch wieder mehr passieren. Mal sehen, ob ich das einhalten kann.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="weblog"/>

    <category term="css"/>

  </entry>

  <entry>
    <title>Scala</title>
    <link href="http://vorba.ch/2013/scala.html"/>
    <id>http://vorba.ch/2013/scala.html</id>
    <updated>2013-11-28T10:15:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2013/scala.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Ich bin seit rund zwei Jahren ein großer Fan der Programmiersprache &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt;. Ich schreibe hier mal ein paar Stichpunkte auf, warum es sich lohnt, die Sprache näher zu betrachten.&lt;/p&gt;
&lt;h2 id=&quot;funktional-und-objektorientiert&quot;&gt;Funktional &lt;em&gt;und&lt;/em&gt; objektorientiert&lt;/h2&gt;
&lt;p&gt;Fast jeder Prozessor, der heute verkauft wird, hat mehr als einen Core. Sogar der Prozessor in meinem Smartphone hat zwei Kerne. Wer schon einmal versucht hat, mit Sprachen wie C++ oder Java ein Programm zu schreiben, das mehrere Kerne zum Schwitzen bringt, wird auch schon einmal eine &lt;a href=&quot;https://de.wikipedia.org/wiki/Race_Condition&quot;&gt;Race Condition&lt;/a&gt; oder einen &lt;a href=&quot;https://de.wikipedia.org/wiki/Deadlock&quot;&gt;Deadlock&lt;/a&gt; erlebt haben.&lt;/p&gt;
&lt;p&gt;Dagegen gibt es natürlich &lt;a href=&quot;https://de.wikipedia.org/wiki/Lock&quot;&gt;Mittel&lt;/a&gt; und &lt;a href=&quot;https://de.wikipedia.org/wiki/Volatile_(Informatik)&quot;&gt;Wege&lt;/a&gt;, die aber die Entwicklung von nebenläufigem Code ziemlich anstrengend machen können.&lt;/p&gt;
&lt;p&gt;Einfacher geht es über funktionale Programmierung. Hier sind Funktionen in der Regel frei von Seiteneffekten. Dadurch ist die Reihenfolge egal, in der Funktionen aufgerufen werden. Außerdem gibt es in den meisten funktionalen Sprachen keine Variablen. Was einmal einen Wert hatte, behält diesen Wert auch. Damit können Objekte von jeder Stelle aus referenziert werden, ohne dass man etwas kaputt machen kann. Die Objekte können sich ja nicht ändern. Weil es aber nicht immer einfach ist, Algorithmen ohne Variablen zu schreiben, bringt Scala diese trotzdem mit und lässt dem Programmierer die Wahl, was er nutzen möchte.&lt;/p&gt;
&lt;p&gt;An vielen Programmiersprachen stört mich jedoch, dass sie keine Objektorientierung mitbringen. Hier spielt Scala seine Stärken aus. Klassen und Vererbung sind mit an Bord, was sehr beim Strukturieren eines Programms hilft.&lt;/p&gt;
&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;/h2&gt;
&lt;aside class=&quot;before&quot;&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; id = &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; name = &lt;span class=&quot;st&quot;&gt;&amp;quot;pvorb&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;caption&quot;&gt;
Einfache Wertzuweisungen
&lt;/p&gt;
&lt;/aside&gt;

&lt;aside class=&quot;after&quot;&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;halloWelt&lt;/span&gt;(msg: String =
    &lt;span class=&quot;st&quot;&gt;&amp;quot;Hallo, Welt!&amp;quot;&lt;/span&gt;) = {
  &lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(msg)
}

&lt;span class=&quot;fu&quot;&gt;halloWelt&lt;/span&gt;()
  &lt;span class=&quot;co&quot;&gt;// =&amp;gt; &amp;quot;Hallo, Welt!&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;caption&quot;&gt;
Funktionsdefinition mit Default-Parameter
&lt;/p&gt;
&lt;/aside&gt;

&lt;p&gt;Scala hat im Vergleich zu anderen statisch typisierten Sprachen eine sehr angenehme Syntax. Wer sich schon immer daran gestört hat, in Java jede noch so kleine Hilfsvariable mit einem Typ versehen zu müssen, wird den Wert der Typinferenz in Scala lieben. Bei einer Zuweisung wird einfach geschaut, welchen Typ der Wert hat, der zugewiesen wird.&lt;/p&gt;
&lt;p&gt;Weitere Konzepte wie beispielsweise &lt;a href=&quot;http://docs.scala-lang.org/tutorials/tour/case-classes.html&quot;&gt;Case Classes&lt;/a&gt; und &lt;a href=&quot;http://docs.scala-lang.org/tutorials/tour/pattern-matching.html&quot;&gt;Pattern Matching&lt;/a&gt; helfen dabei, verständlicheren Code zu schreiben – Scala-Kenntnisse vorausgesetzt.&lt;/p&gt;
&lt;h2 id=&quot;asynchroner-code-durch-futures&quot;&gt;Asynchroner Code durch Futures&lt;/h2&gt;
&lt;p&gt;In Scala lässt sich sehr einfach asynchroner Code schreiben. Darauf will ich gar nicht so genau eingehen, da es den Rahmen hier sprengen würde. Das folgende Beispiel spricht für sich.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; f = Future {
  &lt;span class=&quot;co&quot;&gt;// Hier könnte eine lange Berechnung, eine Datenbankabfrage&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// oder ein HTTP-Request stehen&lt;/span&gt;
}

f.&lt;span class=&quot;fu&quot;&gt;onComplete&lt;/span&gt; {
  &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Success&lt;/span&gt;(result) =&amp;gt;
    &lt;span class=&quot;co&quot;&gt;// Hier etwas mit dem Ergebnis anstellen&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Failure&lt;/span&gt;(err) =&amp;gt;
    &lt;span class=&quot;co&quot;&gt;// Hier den Fehler behandeln&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;caption&quot;&gt;
Futures in Scala
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Wer sich genauer dafür interessiert, dem empfehle ich den kostenlosen Online-Kurs &lt;a href=&quot;https://www.coursera.org/course/reactive&quot;&gt;„Principles of Reactive Programming“&lt;/a&gt; auf Coursera. Wichtig ist, dass man die Callback-Hölle von JavaScript/Node.js sehr leicht vermeiden kann und dass Scalas Futures auch parallel ausgeführt werden können.&lt;/p&gt;
&lt;h2 id=&quot;jvm&quot;&gt;JVM&lt;/h2&gt;
&lt;p&gt;Ja, richtig gelesen. Ein großer Vorteil von Scala ist, dass es auf der Java-VM läuft. In einer Zeit in der die Java-VM eher durch Sicherheitslücken auf sich aufmerksam macht, mag das seltsam klingen. Außerhalb des Browsers handelt es sich trotzdem um ein großartiges Stück Software. Und: Das &lt;a href=&quot;http://konstantinweiss.com/article/android-fuer-die-welt&quot;&gt;wichtigste Betriebssystem der näheren Zukunft&lt;/a&gt;, Android, setzt auf &lt;a href=&quot;https://de.wikipedia.org/wiki/Dalvik_Virtual_Machine&quot;&gt;eine Java-VM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Außerdem lässt sich jede Java-Bibliothek verwenden. Auch Scala-Programme können aus Java heraus aufgerufen werden. Praktisch.&lt;/p&gt;
&lt;h2 id=&quot;nachteile&quot;&gt;Nachteile&lt;/h2&gt;
&lt;p&gt;Der größte Nachteil von Scala ist die hohe Einstiegshürde und die lange Lernkurve. Bis man die Sprache voll verstanden hat und einsetzen kann. Allerdings kann man sehr schnell mit einem kleineren Funktionsumfang produktiv werden. Dann hat man eine Alternative zu Java zur Hand, die einem einiges an Schreibarbeit abnimmt.&lt;/p&gt;
&lt;p&gt;Außerdem kann einen die schiere Fülle an Möglichkeiten manchmal in den Wahnsinn treiben. Jedes Problem lässt sich auf unzählige Arten lösen und man kann unendlich viel Zeit damit verbringen, Code noch eleganter zu formulieren.&lt;/p&gt;
&lt;p&gt;Natürlich gibt es noch weitere Nachteile, aber die Fallen mir jetzt natürlich nicht ein ;). Ich hoffe, ich habe jemanden neugierig machen können.&lt;/p&gt;
&lt;h2 id=&quot;material&quot;&gt;Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Martin Odersky, Lex Spoon, Bill Venners: &lt;a href=&quot;http://www.artima.com/shop/programming_in_scala_2ed&quot;&gt;Programming in Scala&lt;/a&gt;. Artima, 2008, ISBN 978-0-9815316-0-1&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.coursera.org/course/progfun&quot;&gt;Functional Programming Principles in Scala&lt;/a&gt;. Coursera Online-Kurs&lt;/li&gt;
&lt;/ul&gt;

    </content>

    <category term="deutsch"/>

    <category term="scala"/>

    <category term="dev"/>

    <category term="lang"/>

    <category term="fp"/>

    <category term="jvm"/>

  </entry>

  <entry>
    <title>Book review: “Haskell Financial Data Modeling and Predictive Analytics”</title>
    <link href="http://vorba.ch/2014/review-haskell-financial-data-modeling.html"/>
    <id>http://vorba.ch/2014/review-haskell-financial-data-modeling.html</id>
    <updated>2014-01-08T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/haze.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;A few weeks ago, I’ve been asked to review the book “Haskell Financial Data Modeling and Predictive Analytics” by Pavel Ryzhov. I never got such a request before, so I thought “Hey, why not have a look at it”. So I accepted to write a review of the book, once I read it.&lt;/p&gt;
&lt;h2 id=&quot;financial-data-modeling&quot;&gt;Financial Data Modeling?&lt;/h2&gt;
&lt;p&gt;You might ask what I have to do with financial data modeling. Well, I don’t know either but it’s never too late to explore new fields… ;-)&lt;/p&gt;
&lt;h2 id=&quot;the-haskell-platform&quot;&gt;The Haskell Platform&lt;/h2&gt;
&lt;p&gt;Haskell is a functional programming language, that has been around &lt;a href=&quot;http://vorba.ch/tag/lang.html#programming-languages&quot;&gt;for more than 20 years&lt;/a&gt;. And as functional programming languages are being &lt;a href=&quot;http://vorba.ch/2013/scala.html&quot;&gt;hyped everywhere&lt;/a&gt; these days, learning another one can’t be wrong.&lt;/p&gt;
&lt;p&gt;I already had a look at Haskell in August and September 2012 when I started reading the free introductory book &lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;“Learn You a Haskell for Great Good!”&lt;/a&gt; by Miran Lipovača, which I really enjoyed. It’s a brilliant introduction to Haskell and its style is really fun to read. But this review is not about Miran’s book…&lt;/p&gt;
&lt;h2 id=&quot;the-book&quot;&gt;The Book&lt;/h2&gt;
&lt;p&gt;After a short chapter on how to setup all necessary tools on various platforms (which tends to focus on Mac OS X), the author introduces the most important principles of Haskell without going too much into detail. If you haven’t seen any Haskell before, the introduction to the language might be a little too short. Probably enough for a financial programmer who wants to get productive.&lt;/p&gt;
&lt;p&gt;However the introduction was ideal for me as I haven’t programmed much Haskell since “Learn You a Haskell”. You’ll also be confronted with the first major shortcomings of the book: Almost every code example isn’t part of the book itself, but is only available as part of a ZIP archive that can be downloaded along with the e-book. This might be acceptable when you are reading the book with a normal PC. When you are reading the book with an e-book reader, you can’t access the code examples. Too bad.&lt;/p&gt;
&lt;p&gt;During my read I learned the most by studying the code examples, since the explanations often don’t go much into detail. It’s hard to follow the author’s chain of thought even when you have the examples at hand.&lt;/p&gt;
&lt;p&gt;The next chapter, “Getting your Hands Dirty”, starts by explaining (file) I/O and parsing in Haskell. It introduces the Attoparsec library which can handle CSV files in a type-safe manner. Additionally, the concept of managing data by using an object relational mapper is introduced and shown by examples.&lt;/p&gt;
&lt;p&gt;The following chapter is all about “measuring tick intervals”. It provides solutions for maximum likelihood estimation as well as other models for several financial processes and the secant root finding algorithm. Towards the end of the chapter, &lt;a href=&quot;http://www.cse.chalmers.se/~rjmh/QuickCheck/&quot;&gt;QuickCheck&lt;/a&gt; is introduced, which is a great library for testing Haskell programs &lt;em&gt;automagically&lt;/em&gt;. In QuickCheck, a programmer can define properties that a function must satisfy and QuickCheck randomly generates cases the function will be tested on. This is a great addition to conventional unit testing. I also found &lt;a href=&quot;http://scalacheck.org/&quot;&gt;ScalaCheck&lt;/a&gt;, the Scala version of QuickCheck, very helpful for writing Scala test cases.&lt;/p&gt;
&lt;p&gt;I had a hard time reading chapter 4 and 5, since they are diving deep into financial mathematics. That’s why I can hardly give a rating of the quality of these chapters.&lt;/p&gt;
&lt;p&gt;One interesting part can be found in chapter 5. Here, parallel computations are introduced and shown by example.&lt;/p&gt;
&lt;p&gt;Chapter 6 – the last one – gives an introduction to Cabal, the Haskell build system. It can be used to build a project, manage dependencies, run tests and more. So this is pretty much like Maven/Gradle/SBT for Java and Scala or NPM for Node.js. It’s an interesting way to round up the book with a chapter about Cabal – I would have expected it at the beginning – but it’s important to know Cabal if you want to get started with Haskell.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I would have found it better if the author had explained his code in more detail, but that’s just my opinion. The book is not for programmers who don’t have anything to do with financial programming. Wow, who could think of that?! But it seems to be a neat introduction to financial programming in Haskell, if you are willing to learn the language.&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Pavel Ryzhov: &lt;a href=&quot;http://www.packtpub.com/haskell-financial-data-modeling-and-predictive-analytics/book?utm_source=Paul%20Vorbach&quot;&gt;“Haskell Financial Data Modeling and Predictive Analytics”&lt;/a&gt;, Packt Publishing, 2013.&lt;/li&gt;
&lt;/ol&gt;

    </content>

    <category term="english"/>

    <category term="haskell"/>

    <category term="dev"/>

    <category term="lang"/>

    <category term="fp"/>

  </entry>

  <entry>
    <title>1.000.000</title>
    <link href="http://vorba.ch/2014/1M.html"/>
    <id>http://vorba.ch/2014/1M.html</id>
    <updated>2014-01-24T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/cactus.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;in Worten: Eine Million Mal. So oft wurden meine Node-Module seit 2012 &lt;a href=&quot;http://npm-stat.vorba.ch/charts.html?author=pvorb&quot;&gt;insgesamt heruntergeladen&lt;/a&gt;. Ich finde die Zahl ganz schön beeindruckend.&lt;/p&gt;
&lt;p&gt;Vor nicht ganz einem Jahr habe ich mich noch über &lt;a href=&quot;http://vorba.ch/2013/reichweite-nodejs.html&quot;&gt;15000 Downloads in einem Monat&lt;/a&gt; gefreut. Es läuft…&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="dev"/>

    <category term="nodejs"/>

  </entry>

  <entry>
    <title>How to build Tesseract on Cygwin</title>
    <link href="http://vorba.ch/2014/tesseract-cygwin.html"/>
    <id>http://vorba.ch/2014/tesseract-cygwin.html</id>
    <updated>2014-02-20T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/build.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https://code.google.com/p/tesseract-ocr/&quot;&gt;Tesseract&lt;/a&gt; is the most accurate and most adaptable open source OCR engine I know of.&lt;/p&gt;
&lt;p&gt;For my master thesis, I needed to be able to change the inner workings of Tesseract. That’s why I had to compile it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt; is a set of GNU tools for Microsoft Windows which gives you a POSIX environment on Windows.&lt;/p&gt;
&lt;p&gt;Here, I’ll document how to build Tesseract on Cygwin, because that is easier than building on MinGW or in Visual Studio and it is not documented on the &lt;a href=&quot;https://code.google.com/p/tesseract-ocr/wiki/Compiling&quot;&gt;Compiling&lt;/a&gt; wiki page.&lt;/p&gt;
&lt;h2 id=&quot;installing-cygwin&quot;&gt;Installing Cygwin&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Download Cygwin from the &lt;a href=&quot;http://cygwin.com/install.html&quot;&gt;download page&lt;/a&gt; (both 32-bit and 64-bit versions will work).&lt;/li&gt;
&lt;li&gt;Run the installer.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;C:\Cygwin&lt;/code&gt; or &lt;code&gt;C:\Cygwin64&lt;/code&gt; as root directory.&lt;/li&gt;
&lt;li&gt;When you are asked to select the desired packages, set &lt;em&gt;Base&lt;/em&gt;, &lt;em&gt;Devel&lt;/em&gt; and &lt;em&gt;Graphics&lt;/em&gt; to &lt;em&gt;Install&lt;/em&gt;. You can &lt;em&gt;Skip&lt;/em&gt; at least &lt;em&gt;Publishing&lt;/em&gt;, &lt;em&gt;Gnome&lt;/em&gt; and &lt;em&gt;KDE&lt;/em&gt;, probably even more, in order to save time during installation. Leave all other packages at &lt;em&gt;Default&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Continue the installation process until you are done.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;installing-leptonica&quot;&gt;Installing Leptonica&lt;/h2&gt;
&lt;p&gt;In order to build tesseract, we need to build &lt;a href=&quot;http://www.leptonica.org/&quot;&gt;Leptonica&lt;/a&gt; first.&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Open a Cygwin Terminal.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a directory, where you can build the library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /opt/src &amp;amp;&amp;amp; cd /opt/src&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get the source.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://www.leptonica.org/source/leptonica-1.70.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or use the latest source package from Leptonica’s &lt;a href=&quot;http://www.leptonica.org/download.html&quot;&gt;downloads page&lt;/a&gt;. Extract it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -xvf leptonica-1.70.tar.gz
cd leptonica-1.70&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since &lt;code&gt;giflib&lt;/code&gt; is not available in Cygwin, we have to configure it accordingly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./configure --without-giflib&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build and install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make
make install
make clean&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;installing-tesseract&quot;&gt;Installing Tesseract&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;code&gt;/opt/src&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /opt/src&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download Tesseract’s latest source distribution &lt;a href=&quot;https://code.google.com/p/tesseract-ocr/downloads/list&quot;&gt;from here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://tesseract-ocr.googlecode.com/files/tesseract-ocr-3.02.02.tar.gz
tar -xvf tesseract-ocr-3.02.02.tar.gz
cd tesseract-ocr&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./autogen.sh
./configure LDFLAGS=-L/usr/local/lib&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build and install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make
make install
make clean&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;
&lt;p&gt;All training files have to be in &lt;code&gt;/usr/local/share/tessdata&lt;/code&gt;. Download a language data archive file from Tesseracts &lt;a href=&quot;https://code.google.com/p/tesseract-ocr/downloads/list&quot;&gt;downloads page&lt;/a&gt;, extract it and move its contents to &lt;code&gt;/usr/local/share/tessdata&lt;/code&gt;. You can also &lt;a href=&quot;https://code.google.com/p/tesseract-ocr/wiki/TrainingTesseract3&quot;&gt;train your own language data&lt;/a&gt;. Then you’ll be able to run Tesseract.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tesseract -l eng input.tif output&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a &lt;code&gt;output.txt&lt;/code&gt; file with the OCR results.&lt;/p&gt;
&lt;p&gt;If something is not working for you, leave a comment.&lt;/p&gt;

    </content>

    <category term="english"/>

    <category term="howto"/>

    <category term="tesseract"/>

    <category term="ocr"/>

    <category term="c++"/>

    <category term="cygwin"/>

  </entry>

  <entry>
    <title>Gittip</title>
    <link href="http://vorba.ch/2014/gittip.html"/>
    <id>http://vorba.ch/2014/gittip.html</id>
    <updated>2014-04-03T15:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/gittip.png"&gt;&lt;/p&gt;

      &lt;p&gt;Heute habe ich mein &lt;a href=&quot;https://www.gittip.com/pvorb/&quot;&gt;erstes Trinkgeld&lt;/a&gt; per &lt;a href=&quot;https://www.gittip.com/&quot;&gt;Gittip&lt;/a&gt; bekommen. Wie witzig ist das denn?&lt;/p&gt;
&lt;p&gt;Wenn ich der Seite glauben mag, bekomme ich ab sofort jede Woche 3 Dollar dafür, dass ich Open Source-Projekte auf Github veröffentlicht habe, die offenbar jemand brauchen kann.&lt;/p&gt;
&lt;p&gt;Jetzt mache ich mich mal auf die Suche, wem ich denn meine so erhaltenen Trinkgelder zukommen lasse…&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="gittip"/>

    <category term="github"/>

  </entry>

  <entry>
    <title>How to build Tesseract 3.03 with Visual Studio 2013</title>
    <link href="http://vorba.ch/2014/tesseract-3.03-vs2013.html"/>
    <id>http://vorba.ch/2014/tesseract-3.03-vs2013.html</id>
    <updated>2014-07-16T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/build2.jpg"&gt;&lt;/p&gt;

      &lt;hr /&gt;
&lt;p&gt;This article has been translated to &lt;a href=&quot;http://blog.naver.com/killkimno/220062688967&quot;&gt;Korean&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://vorba.ch\2014\tesseract-cygwin.html&quot;&gt;Previously&lt;/a&gt; I wrote about how to compile Tesseract OCR using Cygwin. While this is nice if you want to compile Tesseract for your own system where you can install Cygwin on your own, compiling with Visual Studio is better if you intend to distribute the compiled package so users don’t have to install Cygwin.&lt;/p&gt;
&lt;p&gt;Compiling Tesseract 3.02.02 with Visual C++ 2008 (Express) is &lt;a href=&quot;http://tesseract-ocr.googlecode.com/svn/trunk/vs2008/doc/setup.html&quot;&gt;covered by the documentation&lt;/a&gt; whereas compiling Tesseract 3.03 isn’t covered at all, though.&lt;/p&gt;
&lt;p&gt;Unfortunately newer versions of Tesseract also require a new version of &lt;a href=&quot;http://www.leptonica.org/&quot;&gt;Leptonica&lt;/a&gt;, a C library for image processing and image analysis applications, which in turn requires new versions of zlib, libpng, libtiff, libjpeg and giflib. Tesseract provides pre-compiled versions of Leptonica, which prevents you from having to collect and set up projects for all of these libraries in Visual Studio, which can be a tedious task.&lt;/p&gt;
&lt;p&gt;Yesterday I found a project on GitHub that includes a Visual Studio solution file for all dependencies required to compile Tesseract 3.03: &lt;a href=&quot;https://github.com/charlesw/tesseract-vs2012&quot;&gt;charlesw/tesseract-vs2012&lt;/a&gt;. While following the build instructions there, I stumpled over several build errors, which I could easily resolve by removing a definition. The necessary change is in &lt;a href=&quot;https://github.com/pvorb/tesseract-vs2013&quot;&gt;my fork&lt;/a&gt; of the repository mentioned above.&lt;/p&gt;
&lt;p&gt;This is a write-up of all steps that are required to compile Tesseract 3.03 with Visual Studio 2013.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Install &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install SVN. There are many versions of SVN. You can, for example, install the binary package from &lt;a href=&quot;http://www.sliksvn.com/en/download&quot;&gt;SlickSVN&lt;/a&gt; for free.&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&quot;http://www.visualstudio.com/downloads/download-visual-studio-vs&quot;&gt;Visual Studio 2013 for Windows Desktop&lt;/a&gt; (the Express version will be enough). You don’t need the optional features except for “Microsoft Foundation Classes for C++”.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;building-the-dependencies&quot;&gt;Building the dependencies&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Create a directory where you want to compile Tesseract. In this document, I’ll assume it’s &lt;code&gt;C:\Tesseract-Build\&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open a CMD prompt and change to that directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd \Tesseract-Build\&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clone the dependencies repository from GitHub.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git://github.com/pvorb/tesseract-vs2013.git&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Open the “VS 2013 Developer Command Prompt”. (It can be found in the Start Menu.)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change to the newly cloned repository.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd \Tesseract-Build\tesseract-vs2013&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build the dependencies&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msbuild build.proj&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can close the “VS 2013 Developer Command Prompt”.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;building-tesseract&quot;&gt;Building Tesseract&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Re-open the first command prompt and ensure it’s still in &lt;code&gt;C:\Tesseract-Build\&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get the latest source from SVN.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;svn checkout http://tesseract-ocr.googlecode.com/svn/trunk/ tesseract-ocr&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change to the newly checked-out repository.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd tesseract-ocr&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply the patch provided in &lt;code&gt;tesseract-vs2013&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;svn patch ..\tesseract-vs2013\vs2013+64bit_support.patch&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy both directories in &lt;code&gt;C:\Tesseract-Build\tesseract-vs2013\release\&lt;/code&gt; to &lt;code&gt;C:\Tesseract-Build\&lt;/code&gt;. Now you should have&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Tesseract-Build\include\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Tesseract-Build\lib\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;C:\Tesseract-Build\tesseract-ocr\vs2013\tesseract.sln&lt;/code&gt; with Visual Studio 2013.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Press &lt;code&gt;F7&lt;/code&gt; on your keyboard. Both &lt;code&gt;libtesseract303&lt;/code&gt; and &lt;code&gt;tesseract&lt;/code&gt; should compile without errors.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Visual Studio solution file contains configurations for dynamic and static compilation as well as debugging and release configurations for both 32-Bit and 64-Bit. Select whichever configuration you need and recompile with &lt;code&gt;F7&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can find the compiled binaries in &lt;code&gt;C:\Tesseract-Build\tesseract-ocr\vs2013\bin\&lt;/code&gt;.&lt;/p&gt;

    </content>

    <category term="english"/>

    <category term="howto"/>

    <category term="tesseract"/>

    <category term="ocr"/>

    <category term="c++"/>

    <category term="c"/>

    <category term="cygwin"/>

    <category term="visual-studio"/>

  </entry>

  <entry>
    <title>FontAwesome-Dateigröße reduzieren</title>
    <link href="http://vorba.ch/2014/fontawesome-dateigroesse-reduzieren.html"/>
    <id>http://vorba.ch/2014/fontawesome-dateigroesse-reduzieren.html</id>
    <updated>2014-04-11T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/fontawesome.png"&gt;&lt;/p&gt;

      &lt;p&gt;Seit heute habe ich hier ein paar Pictogramme von &lt;a href=&quot;http://fontawesome.io/&quot;&gt;FontAwesome&lt;/a&gt; im Einsatz. Mich hat aber die initiale Download-Größe von rund 29 kByte für das WOFF-File gestört. Die anderen Dateien bewegen sich ebenfalls in diesem Rahmen, werden aber in den meisten Browsern nicht gebraucht. Wer braucht schon ein Arsenal von 369 Icons (Tendenz steigend) für sein Nullachtfünfzehn-Blog?&lt;/p&gt;
&lt;p&gt;Also habe ich &lt;a href=&quot;http://fontforge.org&quot;&gt;FontForge&lt;/a&gt; angeworfen und alle Icons entfernt, die ich nicht benötige. Übrig geblieben sind ganze drei Icons. Mit FontForge lassen sich außerdem die wichtigen Dateiformate exportieren – mit Außnahme von &lt;em&gt;Embedded Open-Type&lt;/em&gt;. Hierfür habe ich kurzerhand den &lt;a href=&quot;http://everythingfonts.com/otf-to-eot&quot;&gt;OTF-zu-EOT-Konverter&lt;/a&gt; verwendet.&lt;/p&gt;
&lt;p&gt;Ergebnis ist eine WOFF-Datei von 2,14 kByte. Das sind nur noch 7,6 Prozent der ursprünglichen Dateigröße. Ich kann also jedem empfehlen, der FontAwesome im Einsatz hat und nur einen Bruchteil der angebotenen Icons verwendet, die Dateigröße zu reduzieren. Der Aufwand ist vergleichsweise gering.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="css"/>

    <category term="@font-face"/>

    <category term="fontawesome"/>

    <category term="fontforge"/>

  </entry>

</feed>
