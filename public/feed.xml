<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/res/diego.feed.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="de">
  <title>vorba.ch: Articles</title>
  <subtitle>Paul Vorbach's personal weblog</subtitle>
  <updated>2017-12-25T02:09:05.616Z</updated>
  <id>http://vorb.de/log/feed.xml</id>
  <author>
    <name>Paul Vorbach</name>
  </author>
  <rights>© 2008-2017 Paul Vorbach</rights>
  <link href="http://vorba.ch/"/>
  <link rel="self" href="http://vorba.ch/feed.xml"/>
  <category term="computer"/>
  <category term="web"/>
  <category term="development"/>
  <category term="javascript"/>
  <category term="scala"/>
  <category term="akka"/>
  <icon>http://vorba.ch/favicon.ico</icon>

  <entry>
    <title>How to build Tesseract on Cygwin</title>
    <link href="http://vorba.ch/2014/tesseract-cygwin.html"/>
    <id>http://vorba.ch/2014/tesseract-cygwin.html</id>
    <updated>2014-02-20T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/build.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https://code.google.com/p/tesseract-ocr/&quot;&gt;Tesseract&lt;/a&gt; is the most accurate and most adaptable open source OCR engine I know of.&lt;/p&gt;
&lt;p&gt;For my master thesis, I needed to be able to change the inner workings of Tesseract. That’s why I had to compile it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt; is a set of GNU tools for Microsoft Windows which gives you a POSIX environment on Windows.&lt;/p&gt;
&lt;p&gt;Here, I’ll document how to build Tesseract on Cygwin, because that is easier than building on MinGW or in Visual Studio and it is not documented on the &lt;a href=&quot;https://code.google.com/p/tesseract-ocr/wiki/Compiling&quot;&gt;Compiling&lt;/a&gt; wiki page.&lt;/p&gt;
&lt;h2 id=&quot;installing-cygwin&quot;&gt;Installing Cygwin&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Download Cygwin from the &lt;a href=&quot;http://cygwin.com/install.html&quot;&gt;download page&lt;/a&gt; (both 32-bit and 64-bit versions will work).&lt;/li&gt;
&lt;li&gt;Run the installer.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;C:\Cygwin&lt;/code&gt; or &lt;code&gt;C:\Cygwin64&lt;/code&gt; as root directory.&lt;/li&gt;
&lt;li&gt;When you are asked to select the desired packages, set &lt;em&gt;Base&lt;/em&gt;, &lt;em&gt;Devel&lt;/em&gt; and &lt;em&gt;Graphics&lt;/em&gt; to &lt;em&gt;Install&lt;/em&gt;. You can &lt;em&gt;Skip&lt;/em&gt; at least &lt;em&gt;Publishing&lt;/em&gt;, &lt;em&gt;Gnome&lt;/em&gt; and &lt;em&gt;KDE&lt;/em&gt;, probably even more, in order to save time during installation. Leave all other packages at &lt;em&gt;Default&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Continue the installation process until you are done.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;installing-leptonica&quot;&gt;Installing Leptonica&lt;/h2&gt;
&lt;p&gt;In order to build tesseract, we need to build &lt;a href=&quot;http://www.leptonica.org/&quot;&gt;Leptonica&lt;/a&gt; first.&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Open a Cygwin Terminal.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a directory, where you can build the library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /opt/src &amp;amp;&amp;amp; cd /opt/src&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get the source.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://www.leptonica.org/source/leptonica-1.70.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or use the latest source package from Leptonica’s &lt;a href=&quot;http://www.leptonica.org/download.html&quot;&gt;downloads page&lt;/a&gt;. Extract it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -xvf leptonica-1.70.tar.gz
cd leptonica-1.70&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since &lt;code&gt;giflib&lt;/code&gt; is not available in Cygwin, we have to configure it accordingly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./configure --without-giflib&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build and install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make
make install
make clean&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;installing-tesseract&quot;&gt;Installing Tesseract&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;code&gt;/opt/src&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /opt/src&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download Tesseract’s latest source distribution &lt;a href=&quot;https://code.google.com/p/tesseract-ocr/downloads/list&quot;&gt;from here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://tesseract-ocr.googlecode.com/files/tesseract-ocr-3.02.02.tar.gz
tar -xvf tesseract-ocr-3.02.02.tar.gz
cd tesseract-ocr&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./autogen.sh
./configure LDFLAGS=-L/usr/local/lib&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build and install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make
make install
make clean&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;
&lt;p&gt;All training files have to be in &lt;code&gt;/usr/local/share/tessdata&lt;/code&gt;. Download a language data archive file from Tesseracts &lt;a href=&quot;https://code.google.com/p/tesseract-ocr/downloads/list&quot;&gt;downloads page&lt;/a&gt;, extract it and move its contents to &lt;code&gt;/usr/local/share/tessdata&lt;/code&gt;. You can also &lt;a href=&quot;https://code.google.com/p/tesseract-ocr/wiki/TrainingTesseract3&quot;&gt;train your own language data&lt;/a&gt;. Then you’ll be able to run Tesseract.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tesseract -l eng input.tif output&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a &lt;code&gt;output.txt&lt;/code&gt; file with the OCR results.&lt;/p&gt;
&lt;p&gt;If something is not working for you, leave a comment.&lt;/p&gt;

    </content>

    <category term="english"/>

    <category term="howto"/>

    <category term="tesseract"/>

    <category term="ocr"/>

    <category term="c++"/>

    <category term="cygwin"/>

  </entry>

  <entry>
    <title>Gittip</title>
    <link href="http://vorba.ch/2014/gittip.html"/>
    <id>http://vorba.ch/2014/gittip.html</id>
    <updated>2014-04-03T15:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/gittip.png"&gt;&lt;/p&gt;

      &lt;p&gt;Heute habe ich mein &lt;a href=&quot;https://www.gittip.com/pvorb/&quot;&gt;erstes Trinkgeld&lt;/a&gt; per &lt;a href=&quot;https://www.gittip.com/&quot;&gt;Gittip&lt;/a&gt; bekommen. Wie witzig ist das denn?&lt;/p&gt;
&lt;p&gt;Wenn ich der Seite glauben mag, bekomme ich ab sofort jede Woche 3 Dollar dafür, dass ich Open Source-Projekte auf Github veröffentlicht habe, die offenbar jemand brauchen kann.&lt;/p&gt;
&lt;p&gt;Jetzt mache ich mich mal auf die Suche, wem ich denn meine so erhaltenen Trinkgelder zukommen lasse…&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="gittip"/>

    <category term="github"/>

  </entry>

  <entry>
    <title>How to build Tesseract 3.03 with Visual Studio 2013</title>
    <link href="http://vorba.ch/2014/tesseract-3.03-vs2013.html"/>
    <id>http://vorba.ch/2014/tesseract-3.03-vs2013.html</id>
    <updated>2014-07-16T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/build2.jpg"&gt;&lt;/p&gt;

      &lt;hr /&gt;
&lt;p&gt;This article has been translated to &lt;a href=&quot;http://blog.naver.com/killkimno/220062688967&quot;&gt;Korean&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://vorba.ch\2014\tesseract-cygwin.html&quot;&gt;Previously&lt;/a&gt; I wrote about how to compile Tesseract OCR using Cygwin. While this is nice if you want to compile Tesseract for your own system where you can install Cygwin on your own, compiling with Visual Studio is better if you intend to distribute the compiled package so users don’t have to install Cygwin.&lt;/p&gt;
&lt;p&gt;Compiling Tesseract 3.02.02 with Visual C++ 2008 (Express) is &lt;a href=&quot;http://tesseract-ocr.googlecode.com/svn/trunk/vs2008/doc/setup.html&quot;&gt;covered by the documentation&lt;/a&gt; whereas compiling Tesseract 3.03 isn’t covered at all, though.&lt;/p&gt;
&lt;p&gt;Unfortunately newer versions of Tesseract also require a new version of &lt;a href=&quot;http://www.leptonica.org/&quot;&gt;Leptonica&lt;/a&gt;, a C library for image processing and image analysis applications, which in turn requires new versions of zlib, libpng, libtiff, libjpeg and giflib. Tesseract provides pre-compiled versions of Leptonica, which prevents you from having to collect and set up projects for all of these libraries in Visual Studio, which can be a tedious task.&lt;/p&gt;
&lt;p&gt;Yesterday I found a project on GitHub that includes a Visual Studio solution file for all dependencies required to compile Tesseract 3.03: &lt;a href=&quot;https://github.com/charlesw/tesseract-vs2012&quot;&gt;charlesw/tesseract-vs2012&lt;/a&gt;. While following the build instructions there, I stumpled over several build errors, which I could easily resolve by removing a definition. The necessary change is in &lt;a href=&quot;https://github.com/pvorb/tesseract-vs2013&quot;&gt;my fork&lt;/a&gt; of the repository mentioned above.&lt;/p&gt;
&lt;p&gt;This is a write-up of all steps that are required to compile Tesseract 3.03 with Visual Studio 2013.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Install &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install SVN. There are many versions of SVN. You can, for example, install the binary package from &lt;a href=&quot;http://www.sliksvn.com/en/download&quot;&gt;SlickSVN&lt;/a&gt; for free.&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&quot;http://www.visualstudio.com/downloads/download-visual-studio-vs&quot;&gt;Visual Studio 2013 for Windows Desktop&lt;/a&gt; (the Express version will be enough). You don’t need the optional features except for “Microsoft Foundation Classes for C++”.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;building-the-dependencies&quot;&gt;Building the dependencies&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Create a directory where you want to compile Tesseract. In this document, I’ll assume it’s &lt;code&gt;C:\Tesseract-Build\&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open a CMD prompt and change to that directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd \Tesseract-Build\&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clone the dependencies repository from GitHub.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git://github.com/pvorb/tesseract-vs2013.git&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Open the “VS 2013 Developer Command Prompt”. (It can be found in the Start Menu.)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change to the newly cloned repository.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd \Tesseract-Build\tesseract-vs2013&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build the dependencies&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msbuild build.proj&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can close the “VS 2013 Developer Command Prompt”.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;building-tesseract&quot;&gt;Building Tesseract&lt;/h2&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Re-open the first command prompt and ensure it’s still in &lt;code&gt;C:\Tesseract-Build\&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get the latest source from SVN.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;svn checkout http://tesseract-ocr.googlecode.com/svn/trunk/ tesseract-ocr&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change to the newly checked-out repository.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd tesseract-ocr&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply the patch provided in &lt;code&gt;tesseract-vs2013&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;svn patch ..\tesseract-vs2013\vs2013+64bit_support.patch&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy both directories in &lt;code&gt;C:\Tesseract-Build\tesseract-vs2013\release\&lt;/code&gt; to &lt;code&gt;C:\Tesseract-Build\&lt;/code&gt;. Now you should have&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Tesseract-Build\include\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Tesseract-Build\lib\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;C:\Tesseract-Build\tesseract-ocr\vs2013\tesseract.sln&lt;/code&gt; with Visual Studio 2013.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Press &lt;code&gt;F7&lt;/code&gt; on your keyboard. Both &lt;code&gt;libtesseract303&lt;/code&gt; and &lt;code&gt;tesseract&lt;/code&gt; should compile without errors.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Visual Studio solution file contains configurations for dynamic and static compilation as well as debugging and release configurations for both 32-Bit and 64-Bit. Select whichever configuration you need and recompile with &lt;code&gt;F7&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can find the compiled binaries in &lt;code&gt;C:\Tesseract-Build\tesseract-ocr\vs2013\bin\&lt;/code&gt;.&lt;/p&gt;

    </content>

    <category term="english"/>

    <category term="howto"/>

    <category term="tesseract"/>

    <category term="ocr"/>

    <category term="c++"/>

    <category term="c"/>

    <category term="cygwin"/>

    <category term="visual-studio"/>

  </entry>

  <entry>
    <title>FontAwesome-Dateigröße reduzieren</title>
    <link href="http://vorba.ch/2014/fontawesome-dateigroesse-reduzieren.html"/>
    <id>http://vorba.ch/2014/fontawesome-dateigroesse-reduzieren.html</id>
    <updated>2014-04-11T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/fontawesome.png"&gt;&lt;/p&gt;

      &lt;p&gt;Seit heute habe ich hier ein paar Pictogramme von &lt;a href=&quot;http://fontawesome.io/&quot;&gt;FontAwesome&lt;/a&gt; im Einsatz. Mich hat aber die initiale Download-Größe von rund 29 kByte für das WOFF-File gestört. Die anderen Dateien bewegen sich ebenfalls in diesem Rahmen, werden aber in den meisten Browsern nicht gebraucht. Wer braucht schon ein Arsenal von 369 Icons (Tendenz steigend) für sein Nullachtfünfzehn-Blog?&lt;/p&gt;
&lt;p&gt;Also habe ich &lt;a href=&quot;http://fontforge.org&quot;&gt;FontForge&lt;/a&gt; angeworfen und alle Icons entfernt, die ich nicht benötige. Übrig geblieben sind ganze drei Icons. Mit FontForge lassen sich außerdem die wichtigen Dateiformate exportieren – mit Außnahme von &lt;em&gt;Embedded Open-Type&lt;/em&gt;. Hierfür habe ich kurzerhand den &lt;a href=&quot;http://everythingfonts.com/otf-to-eot&quot;&gt;OTF-zu-EOT-Konverter&lt;/a&gt; verwendet.&lt;/p&gt;
&lt;p&gt;Ergebnis ist eine WOFF-Datei von 2,14 kByte. Das sind nur noch 7,6 Prozent der ursprünglichen Dateigröße. Ich kann also jedem empfehlen, der FontAwesome im Einsatz hat und nur einen Bruchteil der angebotenen Icons verwendet, die Dateigröße zu reduzieren. Der Aufwand ist vergleichsweise gering.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="css"/>

    <category term="@font-face"/>

    <category term="fontawesome"/>

    <category term="fontforge"/>

  </entry>

  <entry>
    <title>isso</title>
    <link href="http://vorba.ch/2014/isso.html"/>
    <id>http://vorba.ch/2014/isso.html</id>
    <updated>2014-11-13T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2014/isso.png"&gt;&lt;/p&gt;

      &lt;p&gt;Okay. Disqus nervt. Darum habe ich mir &lt;a href=&quot;https://news.ycombinator.com/item?id=6818416&quot;&gt;Ersatz gesucht&lt;/a&gt; und &lt;em&gt;&lt;a href=&quot;http://posativ.org/isso/&quot;&gt;isso&lt;/a&gt;&lt;/em&gt; entdeckt.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;isso&lt;/em&gt; („ich schrei sonst“) ist ein kleines Python-Programm, das Disqus ersetzen soll. Es wird lokal aufgesetzt und kann, wenn es einmal läuft, ähnlich wie Disqus per JavaScript in jede HTML-Seite eingebunden werden.&lt;/p&gt;
&lt;p&gt;Der Funktionsumfang lässt sich sehen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Einfaches Einbinden per &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;-Tag&lt;/li&gt;
&lt;li&gt;Kommentarzähler für jeden Artikel&lt;/li&gt;
&lt;li&gt;Auszeichnung per Markdown&lt;/li&gt;
&lt;li&gt;Name, E-Mail-Adresse und Website sind optional.&lt;/li&gt;
&lt;li&gt;Optionale Moderation neuer Kommentare per Mail&lt;/li&gt;
&lt;li&gt;Mehrsprachigkeit&lt;/li&gt;
&lt;li&gt;Kommentare lassen sich nachträglich bearbeiten und löschen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Als Datenbank kommt SQLite zum Einsatz.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;„Because comments are not Big Data.“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eine separate Einrichtung der Datenbankanbindung entfällt damit. Außerdem liegen die Kommentare allesamt in einer einfachen Datei, die jederzeit und ohne Probleme gesichert und ersetzt werden kann.&lt;/p&gt;
&lt;p&gt;Das alles klingt ziemlich vielversprechend. Ein paar Dinge fehlen jedoch, die Disqus konnte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Es gibt keine Möglichkeit, sich per E-Mail über neue Kommentare benachrichtigen zu lassen.&lt;/li&gt;
&lt;li&gt;Einen Feed gibt es ebenfalls nicht.&lt;/li&gt;
&lt;li&gt;Gravatare gibt es nicht, dafür aber generierte Avatare, durch die sich die Kommentatoren auf einen Blick unterscheiden lassen – immerhin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die Einrichtung ging leider auf meinem Debian 7 nicht ganz so problemlos, wie die Dokumentation es mir weismachen wollte. Letztlich lag das jedoch weniger an &lt;em&gt;isso&lt;/em&gt; selbst, sondern daran, dass ich mich in der Welt der Python-Webserver nur wenig auskenne. Außerdem funktionierte der Import aus Disqus &lt;a href=&quot;https://github.com/posativ/isso/issues/135&quot;&gt;nicht ohne weiteres&lt;/a&gt;. Nun läuft aber alles rund, soweit ich das sehe, und darf ausprobiert werden. ;-)&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="application"/>

    <category term="python"/>

  </entry>

  <entry>
    <title>How to Set Up Code Coverage for a Java Project using Gradle, Travis, JaCoCo and Codecov</title>
    <link href="http://vorba.ch/2015/java-gradle-travis-jacoco-codecov.html"/>
    <id>http://vorba.ch/2015/java-gradle-travis-jacoco-codecov.html</id>
    <updated>2015-07-23T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2015/roof.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;The code coverage of a project’s test suite can be a useful measure for finding out about the quality of the project. There are several tools for Java that can calculate the code coverage, for example &lt;a href=&quot;http://www.sonarqube.org/&quot;&gt;SonarQube&lt;/a&gt; and &lt;a href=&quot;http://www.eclemma.org/jacoco/&quot;&gt;JaCoCo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During my recent work on &lt;a href=&quot;https://github.com/pvorb/property-providers&quot;&gt;property-providers&lt;/a&gt;, I found out how to give users a quick overview of the test coverage of the code using &lt;a href=&quot;https://codecov.io/&quot;&gt;Codecov&lt;/a&gt;. It is not well documented for projects that don’t use Maven, so here I present the complete setup that brings the code coverage badge to the GitHub page of the project.&lt;/p&gt;
&lt;h2 id=&quot;gradle&quot;&gt;Gradle&lt;/h2&gt;
&lt;p&gt;The project uses Gradle instead of Maven. Here’s its &lt;code&gt;build.gradle&lt;/code&gt;. It configures JaCoCo reports. XML reports are disabled by default but those are needed in order to work with Codecov, so enable them. Also the &lt;code&gt;check&lt;/code&gt; task, which is run by Travis, needs to depend on &lt;code&gt;jacocoTestReport&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;&lt;code&gt;apply plugin: &amp;#39;java&amp;#39;
apply plugin: &amp;#39;jacoco&amp;#39;

version = &amp;#39;0.0.1&amp;#39;
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // project dependencies
    // ...
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;travis-ci&quot;&gt;Travis-CI&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis&lt;/a&gt; is a hosted continuous integration service. You can sign up with a GitHub account. It’s free for open source projects.&lt;/p&gt;
&lt;p&gt;This is what the Travis &lt;code&gt;.travis.yml&lt;/code&gt; configuration file looks like. Whenever a build succeeds, the last line uploads the JaCoCo report to Codecov.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode yaml&quot;&gt;&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;language:&lt;/span&gt; java
&lt;span class=&quot;fu&quot;&gt;jdk:&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; oraclejdk8
&lt;span class=&quot;fu&quot;&gt;after_success:&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;bash &amp;lt;(curl -s https:&lt;/span&gt;//codecov.io/bash)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;codecov&quot;&gt;Codecov&lt;/h2&gt;
&lt;p&gt;In order to use Codecov, you need to sign up first. It is straight forward for Github users: just &lt;a href=&quot;https://codecov.io/login/github&quot;&gt;sign up with GitHub&lt;/a&gt; and then add the repository that you wish to monitor. The service, like Travis, is free for open source projects.&lt;/p&gt;
&lt;h2 id=&quot;readme&quot;&gt;Readme&lt;/h2&gt;
&lt;p&gt;Finally, I added this markdown snippet to my &lt;code&gt;README.md&lt;/code&gt; file in order to show the coverage badge. I used the badge from &lt;a href=&quot;http://shields.io/&quot;&gt;shields.io&lt;/a&gt; instead of Codecov’s own badge, because it gives better consistency with other badges.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode markdown&quot;&gt;&lt;code class=&quot;sourceCode markdown&quot;&gt;&lt;span class=&quot;ot&quot;&gt;[![Code Coverage](https://img.shields.io/codecov/c/github/pvorb/property-providers/develop.svg)&lt;/span&gt;](https://codecov.io/github/pvorb/property-providers?branch=develop)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s all! I hope this article may help you on your way to set up code coverage monitoring for your Java project.&lt;/p&gt;

    </content>

    <category term="english"/>

    <category term="howto"/>

    <category term="testing"/>

    <category term="java"/>

    <category term="gradle"/>

    <category term="code-coverage"/>

  </entry>

  <entry>
    <title>Fast Front End Development Cycle with Spring Boot</title>
    <link href="http://vorba.ch/2016/fast-spring-boot-development-cycle.html"/>
    <id>http://vorba.ch/2016/fast-spring-boot-development-cycle.html</id>
    <updated>2016-10-07T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2016/train.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; makes developing microservices a breeze. It’s easy to get to speed without the need for much configuration. However, it can be quite annoying to compile and restart the program every time you change a component. To overcome this drawback, the Spring Boot documentation includes a how-to guide about configuring &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/1.3.8.RELEASE/reference/html/howto-hotswapping.html&quot;&gt;hot swapping&lt;/a&gt; such as static web resources, templates and Java classes while the server keeps running. A big part of the solution is to use &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/1.3.8.RELEASE/reference/html/using-boot-devtools.html&quot;&gt;the developer tools&lt;/a&gt;, which provide some helpful settings that improve the overall development experience.&lt;/p&gt;
&lt;p&gt;When it comes to front end development, it can be quite annoying to have to manually hit “Make Project” every time a file changes. Especially when running a separate build tool for front end components like Webpack even IntelliJ’s setting “Make project automatically” won’t always update the generated resources on the server in time.&lt;/p&gt;
&lt;p&gt;What I wanted to have instead was to be able to just refresh the browser and see the exact same static resources as in the IDE. As it shows, this is possible with Spring Boot and Maven. The described method has been tested with Spring Boot 1.3.8.RELEASE and IntelliJ IDEA 2016.2.4.&lt;/p&gt;
&lt;p&gt;In my &lt;code&gt;pom.xml&lt;/code&gt; file I have configured the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; artifact as the parent of my project, so I don’t need to specify Spring Boot-managed dependency versions on my own. You may also want to explicitly specify dependency and plugin versions instead.&lt;/p&gt;
&lt;p&gt;While not required, it makes sense to add a dependency on &lt;code&gt;spring-boot-devtools&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-devtools&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Key to the solution is to keep static resources in &lt;code&gt;src/main/webapp&lt;/code&gt; instead of &lt;code&gt;src/main/resources/static&lt;/code&gt;. You may already know this directory from typical WAR-packaged applications. Then, you’ll also need to configure &lt;code&gt;maven-resources-plugin&lt;/code&gt; to copy files under &lt;code&gt;src/main/webapp&lt;/code&gt; directly to &lt;code&gt;target/classes/public&lt;/code&gt; or &lt;code&gt;target/classes/static&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-resources-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.0.1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;copy-resources&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;generate-resources&lt;span class=&quot;kw&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;copy-resources&lt;span class=&quot;kw&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;${basedir}/target/classes/public&lt;span class=&quot;kw&quot;&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;kw&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/main/webapp&lt;span class=&quot;kw&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;kw&quot;&gt;&amp;lt;filtering&amp;gt;&lt;/span&gt;false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filtering&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way a running instance of Spring Boot can always serve the most recent version of a file. Hitting refresh in the browser will show it immediately.&lt;/p&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/pvorb/platon/blob/913647edbaf69d309df75f1b871ff922a5b23aca/pom.xml&quot;&gt;complete POM file on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;P.S.:&lt;/em&gt; If you run a front end build tool like Webpack with &lt;code&gt;--watch&lt;/code&gt;, changing a file will not always trigger a rebuild of affected bundles, when you use IntelliJ for editing. This is caused by a feature called “safe write” which you can turn off in the settings under “Appearance &amp;amp; Behavior” → “System Settings”.&lt;/p&gt;

    </content>

    <category term="english"/>

    <category term="howto"/>

    <category term="java"/>

    <category term="spring-boot"/>

    <category term="maven"/>

  </entry>

  <entry>
    <title>Automating Integration Testing of Spring Boot Applications on Travis CI and Sauce Labs</title>
    <link href="http://vorba.ch/2016/integration-testing-spring-boot-travis-saucelabs.html"/>
    <id>http://vorba.ch/2016/integration-testing-spring-boot-travis-saucelabs.html</id>
    <updated>2016-12-01T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2016/flowers.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Writing Unit Tests often is not enough to make sure your software is working correctly. In order to make sure your components are &lt;em&gt;integrated&lt;/em&gt; correctly, writing automated &lt;em&gt;Integration Tests&lt;/em&gt; will help you accomplish that goal. Unfortunately, setting up a project for automated integration testing is not straight forward. In this article I’ll show how to set up a Spring Boot web application with Maven that automatically runs on Travis CI and connects to Selenium WebDrivers running on Sauce Labs for testing with real browsers. This is done step-by-step so hopefully it will be easy for you to follow along and set up integration tests for your own Spring Boot project.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You’re going to need accounts on &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; and &lt;a href=&quot;https://saucelabs.com/&quot;&gt;Sauce Labs&lt;/a&gt; to follow the instructions in this article. All of these services are entirely free for open source projects.&lt;/p&gt;
&lt;h2 id=&quot;local-setup&quot;&gt;Local setup&lt;/h2&gt;
&lt;p&gt;In order to help with development and testing the setup, we’re first going to set up the environment locally. Let’s start with this simple &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;project&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.example&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;webapp&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.1.0-SNAPSHOT&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;kw&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.4.2.RELEASE&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;selenium.version&amp;gt;&lt;/span&gt;2.53.1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/selenium.version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.seleniumhq.selenium&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;selenium-remote-driver&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${selenium.version}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.seleniumhq.selenium&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;selenium-support&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${selenium.version}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the main application class (&lt;code&gt;src/main/java/org/example/webapp/WebApp.java&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package org.example.webapp;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.boot.SpringApplication;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.boot.autoconfigure.SpringBootApplication;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; WebApp {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String&lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;args) {
        SpringApplication.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(WebApp.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, args);
    }

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And there’s also an HTML file we want to navigate our WebDriver to (&lt;code&gt;src/main/resources/static/index.html&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;working&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;It works!&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;simple-integration-test&quot;&gt;Simple integration test&lt;/h2&gt;
&lt;p&gt;In order to be able to inject a Selenium WebDriver into the test classes, we add a Spring configuration class (&lt;code&gt;src/test/java/org/example/webapp/integration/ITConfig.java&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package org.example.webapp.integration;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.openqa.selenium.WebDriver;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.openqa.selenium.remote.DesiredCapabilities;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.openqa.selenium.remote.RemoteWebDriver;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.context.annotation.Bean;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.context.annotation.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.core.env.Environment;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.net.MalformedURLException;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.net.URL;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ITConfig {

    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Environment env;

    &lt;span class=&quot;fu&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; WebDriver &lt;span class=&quot;fu&quot;&gt;webDriver&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; MalformedURLException {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RemoteWebDriver&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getRemoteUrl&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;getDesiredCapabilities&lt;/span&gt;());
    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; DesiredCapabilities &lt;span class=&quot;fu&quot;&gt;getDesiredCapabilities&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; DesiredCapabilities.&lt;span class=&quot;fu&quot;&gt;firefox&lt;/span&gt;();
    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; URL &lt;span class=&quot;fu&quot;&gt;getRemoteUrl&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; MalformedURLException {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; URL(&lt;span class=&quot;st&quot;&gt;&amp;quot;http://localhost:4445/wd/hub&amp;quot;&lt;/span&gt;);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s a very basic integration test (&lt;code&gt;src/test/java/org/example/webapp/integration/IndexTest.java&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package org.example.webapp.integration;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.junit.Assert;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.junit.Test;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.junit.runner.RunWith;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.openqa.selenium.By;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.openqa.selenium.WebDriver;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.openqa.selenium.WebElement;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.test.context.ContextConfiguration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import static org.hamcrest.Matchers.equalTo;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import static org.hamcrest.Matchers.is;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@ContextConfiguration&lt;/span&gt;(classes = ITConfig.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; IndexTest {

    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; WebDriver webDriver;

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;visitIndexPage&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {

        webDriver.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;http://localhost:8080/&amp;quot;&lt;/span&gt;);
        WebElement working = webDriver.&lt;span class=&quot;fu&quot;&gt;findElement&lt;/span&gt;(By.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;working&amp;quot;&lt;/span&gt;));

        Assert.&lt;span class=&quot;fu&quot;&gt;assertThat&lt;/span&gt;(working.&lt;span class=&quot;fu&quot;&gt;getText&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;equalTo&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;)));
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s everything you need for the integration test itself. In order to run it locally, you’ll have to download the Selenium standalone server (get &lt;code&gt;selenium-server-standalone-2.53.1.jar&lt;/code&gt; from &lt;a href=&quot;http://selenium-release.storage.googleapis.com/index.html?path=2.53/&quot;&gt;here&lt;/a&gt;) as well as the &lt;a href=&quot;https://github.com/mozilla/geckodriver/releases&quot;&gt;geckodriver for your platform&lt;/a&gt;. Then put both the geckodriver binary and the selenium jar in a directory anywhere on your computer and run selenium from a command prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -jar selenium-server-standalone-2.53.1.jar -port 4445&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From a separate command prompt, you can now run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn spring-boot:run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to start the application and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn test&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in a third command prompt. Hopefully, you’ll see your test start Firefox after a while an it navigating to &lt;code&gt;http://localhost:8080/&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;automating-the-configuration&quot;&gt;Automating the configuration&lt;/h2&gt;
&lt;p&gt;The next step on our way is to be able to start our web app and the integration tests in a single command. This can be achieved using the &lt;a href=&quot;https://maven.apache.org/surefire/maven-failsafe-plugin/&quot;&gt;maven-failsafe-plugin&lt;/a&gt;. Alter the &lt;code&gt;build&lt;/code&gt; definition in your &lt;code&gt;pom.xml&lt;/code&gt; to the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;pre-integration-test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;start&lt;span class=&quot;kw&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;arguments&amp;gt;&lt;/span&gt;--server.port=${server.port}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/arguments&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;post-integration-test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;stop&lt;span class=&quot;kw&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.mojo&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;build-helper-maven-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.12&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;reserve-container-port&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;reserve-network-port&lt;span class=&quot;kw&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;process-resources&lt;span class=&quot;kw&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;portNames&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;kw&quot;&gt;&amp;lt;portName&amp;gt;&lt;/span&gt;server.port&lt;span class=&quot;kw&quot;&gt;&amp;lt;/portName&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/portNames&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-failsafe-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.18.1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;systemPropertyVariables&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;server.port&amp;gt;&lt;/span&gt;${server.port}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/server.port&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;selenium.version&amp;gt;&lt;/span&gt;${selenium.version}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/selenium.version&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/systemPropertyVariables&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Failsafe adds several integration-test phases to the Maven lifecycle. We added an execution to the spring-boot-maven-plugin that starts the app before integration tests are run. The build-helper-maven-plugin is used to reserve a free port, so it won’t have port collisions if port 8080 is already in use.&lt;/p&gt;
&lt;p&gt;Failsafe automatically detects integration tests by their name. All classes under &lt;code&gt;src/test/java&lt;/code&gt; that end with &lt;code&gt;IT&lt;/code&gt; will be executed by Failsafe instead of Surefire. Therefore we must rename the class &lt;code&gt;IndexTest&lt;/code&gt; to &lt;code&gt;IndexIT&lt;/code&gt;. Also we need to dynamically set the port of the requested URL in the test. Here’s how the test looks after these changes:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@ContextConfiguration&lt;/span&gt;(classes = ITConfig.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; IndexIT {

    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; WebDriver webDriver;

    &lt;span class=&quot;fu&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;${server.port}&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; serverPort;

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;visitIndexPage&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {

        webDriver.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(String&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;http://localhost:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/&amp;quot;&lt;/span&gt;, serverPort));
        WebElement working = webDriver.&lt;span class=&quot;fu&quot;&gt;findElement&lt;/span&gt;(By.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;working&amp;quot;&lt;/span&gt;));

        Assert.&lt;span class=&quot;fu&quot;&gt;assertThat&lt;/span&gt;(working.&lt;span class=&quot;fu&quot;&gt;getText&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;equalTo&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;)));
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you should be able to run the integration tests with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn verify&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;testing-continuously&quot;&gt;Testing continuously&lt;/h2&gt;
&lt;p&gt;Since programmers are lazy and soon won’t want to run these time consuming tests on their own machines, it’s time to configure a CI server to do it for you. Travis CI is a solution that integrates well into GitHub and also has support to run Selenium tests via Sauce Labs.&lt;/p&gt;
&lt;p&gt;First you need to enable the GitHub project in your Travis profile. This should only be one click:&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://vorba.ch\2016\travis-config.png&quot; alt=&quot;Travis project activation&quot; /&gt;
&lt;p class=&quot;caption&quot;&gt;Travis project activation&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Then you need to set up your project on Sauce Labs. I won’t cover this here, but once your project is set up, you will see your access key in your account settings. This access key is needed to verify the Travis CI server that runs your tests is allowed to control a Sauce Labs WebDriver. This key shouldn’t become publicy visible, so it makes sense to encrypt it. This can be done by using the Travis CLI tool (&lt;a href=&quot;https://github.com/travis-ci/travis.rb#installation&quot;&gt;installation instructions&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Encryption is done with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;travis encrypt &amp;quot;SAUCE_ACCESS_KEY=your-access-key&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns a string that you need for the file &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode yaml&quot;&gt;&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;language:&lt;/span&gt; java

&lt;span class=&quot;fu&quot;&gt;jdk:&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; oraclejdk8

&lt;span class=&quot;fu&quot;&gt;addons:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;sauce_connect:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;username:&lt;/span&gt; your-user-name
  &lt;span class=&quot;fu&quot;&gt;jwt:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;secure:&lt;/span&gt; your-encrypted-access-key

&lt;span class=&quot;fu&quot;&gt;script:&lt;/span&gt;
  mvn verify -B&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace &lt;code&gt;your-user-name&lt;/code&gt; with the name of your Sauce Labs account and &lt;code&gt;your-encrypted-access-key&lt;/code&gt; with the encrypted access key string. Additionally, Sauce Labs user name and access key need to be set as environment variables in the settings of your project as &lt;code&gt;SAUCE_USERNAME&lt;/code&gt; and &lt;code&gt;SAUCE_ACCESS_KEY&lt;/code&gt; (unencrypted).&lt;/p&gt;
&lt;p&gt;When this is done, our &lt;code&gt;ITConfig&lt;/code&gt; needs to be modified slightly to provide the &lt;code&gt;RemoteWebDriver&lt;/code&gt; with a URL that contains the information of the Sauce Labs account:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ITConfig {

    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Environment env;

    &lt;span class=&quot;fu&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; WebDriver &lt;span class=&quot;fu&quot;&gt;webDriver&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; MalformedURLException {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RemoteWebDriver&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getRemoteUrl&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;getDesiredCapabilities&lt;/span&gt;());
    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; DesiredCapabilities &lt;span class=&quot;fu&quot;&gt;getDesiredCapabilities&lt;/span&gt;() {

        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; DesiredCapabilities capabilities = DesiredCapabilities.&lt;span class=&quot;fu&quot;&gt;firefox&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;useSauceLabs&lt;/span&gt;()) {
            capabilities.&lt;span class=&quot;fu&quot;&gt;setCapability&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;tunnel-identifier&amp;quot;&lt;/span&gt;, env.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;TRAVIS_JOB_NUMBER&amp;quot;&lt;/span&gt;));
            capabilities.&lt;span class=&quot;fu&quot;&gt;setCapability&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;seleniumVersion&amp;quot;&lt;/span&gt;, env.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;selenium.version&amp;quot;&lt;/span&gt;));
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; capabilities;
    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;useSauceLabs&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; env.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;SAUCE_USERNAME&amp;quot;&lt;/span&gt;) != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; URL &lt;span class=&quot;fu&quot;&gt;getRemoteUrl&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; MalformedURLException {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;useSauceLabs&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; URL(String&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;http://&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;@localhost:4445/wd/hub&amp;quot;&lt;/span&gt;,
                    env.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;SAUCE_USERNAME&amp;quot;&lt;/span&gt;), env.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;SAUCE_ACCESS_KEY&amp;quot;&lt;/span&gt;)));
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; URL(&lt;span class=&quot;st&quot;&gt;&amp;quot;http://localhost:4445/wd/hub&amp;quot;&lt;/span&gt;);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Push these changes to GitHub and you’re done! You can watch your tests run on Travis and even watch the browser in your Sauce Lab account.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://vorba.ch\2016\it-works.png&quot; alt=&quot;It works!&quot; /&gt;
&lt;p class=&quot;caption&quot;&gt;It works!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The complete sources of this sample project are &lt;a href=&quot;https://github.com/pvorb/spring-boot-integration-test-example&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;

    </content>

    <category term="english"/>

    <category term="howto"/>

    <category term="java"/>

    <category term="spring-boot"/>

    <category term="maven"/>

    <category term="testing"/>

  </entry>

  <entry>
    <title>An Introduction to Project Lombok</title>
    <link href="http://vorba.ch/2017/lombok.html"/>
    <id>http://vorba.ch/2017/lombok.html</id>
    <updated>2017-08-03T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorba.ch/2017/lombok.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;The following map shows the island Lombok’s location in south east Asia. You already know its major neighbor in the west, the one with Indonesia’s capital, Jakarta, on it. Right, that’s &lt;em&gt;Java&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://vorba.ch/2017/lombok-map.png&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;
Lombok on a map of Indonesia and Malaysia
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;But this article is not about islands or geography. It’s is about &lt;a href=&quot;https://projectlombok.org/&quot;&gt;Project Lombok&lt;/a&gt;, a plugin to the Java compiler, that allows to automatically generate bytecode for much of the boilerplate that is required when writing Java code.&lt;/p&gt;
&lt;p&gt;Here’s a typical Java POJO:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Movie {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Long id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String title;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String subtitle;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String genre;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String director;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; LocalDate firstRelease;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;Actor&amp;gt; actors;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Long &lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setId&lt;/span&gt;(Long id) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; = id;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getTitle&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; title;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setTitle&lt;/span&gt;(String title) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;title&lt;/span&gt; = title;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getSubtitle&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; subtitle;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSubtitle&lt;/span&gt;(String subtitle) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;subtitle&lt;/span&gt; = subtitle;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getGenre&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; genre;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setGenre&lt;/span&gt;(String genre) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;genre&lt;/span&gt; = genre;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getDirector&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; director;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setDirector&lt;/span&gt;(String director) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;director&lt;/span&gt; = director;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; LocalDate &lt;span class=&quot;fu&quot;&gt;getFirstRelease&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; firstRelease;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setFirstRelease&lt;/span&gt;(LocalDate firstRelease) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;firstRelease&lt;/span&gt; = firstRelease;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Actor&amp;gt; &lt;span class=&quot;fu&quot;&gt;getActors&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; actors;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setActors&lt;/span&gt;(List&amp;lt;Actor&amp;gt; actors) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;actors&lt;/span&gt; = actors;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(Object object) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt; == object) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (object == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; || &lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;() != object.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(object)) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }

        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Movie movie = (Movie) object;

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (id != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? !id.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(movie.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;) : movie.&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (title != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? !title.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(movie.&lt;span class=&quot;fu&quot;&gt;title&lt;/span&gt;) : movie.&lt;span class=&quot;fu&quot;&gt;title&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (genre != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? !genre.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(movie.&lt;span class=&quot;fu&quot;&gt;genre&lt;/span&gt;) : movie.&lt;span class=&quot;fu&quot;&gt;genre&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (director != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? !director.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(movie.&lt;span class=&quot;fu&quot;&gt;director&lt;/span&gt;) : movie.&lt;span class=&quot;fu&quot;&gt;director&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (firstRelease != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? !firstRelease.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(movie.&lt;span class=&quot;fu&quot;&gt;firstRelease&lt;/span&gt;) : movie.&lt;span class=&quot;fu&quot;&gt;firstRelease&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (actors != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? !actors.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(movie.&lt;span class=&quot;fu&quot;&gt;actors&lt;/span&gt;) : movie.&lt;span class=&quot;fu&quot;&gt;actors&lt;/span&gt; != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;();
        result = &lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt; * result + (id != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? id.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() : &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
        result = &lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt; * result + (title != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? title.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() : &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
        result = &lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt; * result + (subtitle != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? subtitle.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() : &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
        result = &lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt; * result + (genre != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? genre.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() : &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
        result = &lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt; * result + (director != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? director.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() : &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
        result = &lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt; * result + (firstRelease != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? firstRelease.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() : &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
        result = &lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt; * result + (actors != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? actors.&lt;span class=&quot;fu&quot;&gt;hashCode&lt;/span&gt;() : &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; result;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Movie{&amp;quot;&lt;/span&gt; +
                &lt;span class=&quot;st&quot;&gt;&amp;quot;id=&amp;quot;&lt;/span&gt; + id +
                &lt;span class=&quot;st&quot;&gt;&amp;quot;, title=&amp;#39;&amp;quot;&lt;/span&gt; + title + &lt;span class=&quot;ch&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; +
                &lt;span class=&quot;st&quot;&gt;&amp;quot;, subtitle=&amp;#39;&amp;quot;&lt;/span&gt; + subtitle + &lt;span class=&quot;ch&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; +
                &lt;span class=&quot;st&quot;&gt;&amp;quot;, genre=&amp;#39;&amp;quot;&lt;/span&gt; + genre + &lt;span class=&quot;ch&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; +
                &lt;span class=&quot;st&quot;&gt;&amp;quot;, director=&amp;#39;&amp;quot;&lt;/span&gt; + director + &lt;span class=&quot;ch&quot;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; +
                &lt;span class=&quot;st&quot;&gt;&amp;quot;, firstRelease=&amp;quot;&lt;/span&gt; + firstRelease +
                &lt;span class=&quot;st&quot;&gt;&amp;quot;, actors=&amp;quot;&lt;/span&gt; + actors +
                &amp;#39;}&amp;#39;;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s a hell lot of code (126 LOC, to be exact) for something as simple as a class holding only metadata about movies.&lt;/p&gt;
&lt;p&gt;“That’s a lot of code, but my IDE can generate it for me,” I here you say. That’s absolutely correct, but I’d like to point out that writing boilerplate code is just one side of the coin. A lot of your time you’re reading some other developer’s code, hunting for that tricky bug, where the all that boilerplate will obfuscate the essence of the code.&lt;/p&gt;
&lt;p&gt;By the way, have you noticed the error/unexpected behavior in the code snippet above?&lt;/p&gt;
&lt;p&gt;It’s likely you just skimmed through it and thus have missed it. It’s in the &lt;code&gt;equals()&lt;/code&gt; method, where I forgot to check for equality of &lt;code&gt;subtitle&lt;/code&gt;. It’s included in &lt;code&gt;hashCode()&lt;/code&gt;, though, so that will likely lead to tricky problems when keeping a &lt;code&gt;Set&amp;lt;Movie&amp;gt;&lt;/code&gt;, for example. Errors like these can easily happen when you add a new field to a class, but forget to re-generate your methods.&lt;/p&gt;
&lt;p&gt;In contrast, here’s the same class using Lombok, just without the mistake:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode java&quot;&gt;&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Movie {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Long id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String title;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String subtitle;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String genre;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String director;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; LocalDate firstRelease;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;Actor&amp;gt; actors;

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just by annotating the class with &lt;code&gt;@Data&lt;/code&gt;, Lombok will generate all getters, setters, &lt;code&gt;equals()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt;, and even a decent &lt;code&gt;toString()&lt;/code&gt;. But that’s only the tip of the iceberg. There are many other annotations, e.g. for constructors, the builder pattern, or instantiating a logger. Just have a look at &lt;a href=&quot;https://projectlombok.org/features/all&quot;&gt;the feature list on their website&lt;/a&gt; for an overview.&lt;/p&gt;
&lt;p&gt;Now that you’ve seen a code sample, you may worry about &lt;a href=&quot;https://stackoverflow.com/q/3852091/432354&quot;&gt;whether it’s safe to use it in your project&lt;/a&gt;. Will my IDE still be able to navigate my code? Will it show errors for missing methods? Will I still be able to refactor using the IDE?&lt;/p&gt;
&lt;p&gt;I also wasn’t sure until a year ago. But then a colleague of mine just started to use it in one of our products and I used that as an opportunity to give it a try. I haven’t looked back ever since.&lt;/p&gt;
&lt;p&gt;Getting started is quite simple. Just add the following dependency:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.16.18&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;javac&lt;/code&gt; will automatically detect Lombok on the classpath (Lombok makes use of &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=269&quot;&gt;JSR-269: “Pluggable Annotation Processing API”&lt;/a&gt;). The dependency can be &lt;em&gt;provided&lt;/em&gt;, since there’s no need for Lombok to be around at run-time. All the magic happens at compile-time.&lt;/p&gt;
&lt;p&gt;As for IDE support, there’s a brilliant Lombok plugin for IntelliJ IDEA. Just search the plugin repository for “lombok”. If you want to use it in Eclipse it’s even simpler. Download the lombok.jar from the project website and run it. A graphical installer will lead you through the required steps.&lt;/p&gt;
&lt;p&gt;For instance, here’s what the Structure view will look like in IDEA:&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://vorba.ch/2017/lombok-idea.png&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;
Class &lt;code&gt;Movie&lt;/code&gt; in IDEA
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, everything from the first code snippet is there.&lt;/p&gt;
&lt;p&gt;Of course another way to avoid the tedious work of writing and maintaining Java’s boilerplate is using other JVM languages like Kotlin or Scala, which solve Java’s problems using special syntax. But that’s a different story.&lt;/p&gt;
&lt;p&gt;What do you think about Lombok? Are you also thinking about using it in your software or did you already give it a try? Let me and others know in the comments.&lt;/p&gt;

    </content>

    <category term="english"/>

    <category term="java"/>

  </entry>

  <entry>
    <title>Living up to Your own Standards</title>
    <link href="http://vorba.ch/2017/jacoco-coverage-threshold.html"/>
    <id>http://vorba.ch/2017/jacoco-coverage-threshold.html</id>
    <updated>2017-12-23T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://paul.vorba.ch/</uri>
    </author>
    <content type="html">

      &lt;p&gt;My reader Rebeca asked me yesterday if I could post about how to let your test suite fail if it falls below a certain threshold. So here’s how you can do this using the JaCoCo plugins for Maven and Gradle.&lt;/p&gt;
&lt;h2 id=&quot;maven&quot;&gt;Maven&lt;/h2&gt;
&lt;p&gt;You can configure a rule in &lt;code&gt;jacoco-maven-plugin&lt;/code&gt; as follows.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.jacoco&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jacoco-maven-plugin&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.7.9&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;check&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;check&lt;span class=&quot;kw&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;rules&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;rule&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; implementation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;org.jacoco.maven.RuleConfiguration&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;element&amp;gt;&lt;/span&gt;BUNDLE&lt;span class=&quot;kw&quot;&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;kw&quot;&gt;&amp;lt;limit&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; implementation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;org.jacoco.report.check.Limit&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;counter&amp;gt;&lt;/span&gt;INSTRUCTION&lt;span class=&quot;kw&quot;&gt;&amp;lt;/counter&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;COVEREDRATIO&lt;span class=&quot;kw&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;minimum&amp;gt;&lt;/span&gt;0.80&lt;span class=&quot;kw&quot;&gt;&amp;lt;/minimum&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/limit&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/limits&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if your test suite falls below 80% instruction coverage, the build will fail with the following message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mvn verify
...
[ERROR] Failed to execute goal org.jacoco:jacoco-maven-plugin:0.7.9:check (check) on project platon: Coverage checks have not been met. See log for details. -&amp;gt; [Help 1]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are many other possible rules for the check mojo &lt;a href=&quot;http://www.jacoco.org/jacoco/trunk/doc/check-mojo.html&quot;&gt;documented in the official JaCoCo documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;gradle&quot;&gt;Gradle&lt;/h2&gt;
&lt;p&gt;Configuring these rules is even simpler for Gradle.&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;&lt;code&gt;apply plugin: &amp;#39;jacoco&amp;#39;

// ...

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

jacocoTestCoverageVerification.dependsOn(jacocoTestReport)
check.dependsOn(jacocoTestCoverageVerification)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what you get when you run &lt;code&gt;gradle check&lt;/code&gt; and test coverage is low.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle check
...
:jacocoTestReport
[ant:jacocoReport] Rule violated for bundle property-providers: instructions covered ratio is 0.7, but expected minimum is 0.8
:jacocoTestCoverageVerification FAILED
FAILURE: Build failed with an exception.
* What went wrong:
Execution failed for task &amp;#39;:jacocoTestCoverageVerification&amp;#39;.
&amp;gt; Rule violated for bundle property-providers: instructions covered ratio is 0.7, but expected minimum is 0.8
* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
* Get more help at https://help.gradle.org
BUILD FAILED in 14s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find more configuration examples in &lt;a href=&quot;https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_report_violation_rules&quot;&gt;Gradle’s JaCoCo plugin documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope this guide will help one or the other trying to achieve something similar.&lt;/p&gt;

    </content>

    <category term="english"/>

    <category term="howto"/>

    <category term="testing"/>

    <category term="java"/>

    <category term="gradle"/>

    <category term="maven"/>

    <category term="code-coverage"/>

  </entry>

</feed>
