<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/res/milten.feed.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="de">
  <title>vorb.de: Articles</title>
  <subtitle>vorb opposes recursive backronyms</subtitle>
  <updated>2013-02-07T20:47:51.411Z</updated>
  <id>http://vorb.de/log/feed.xml</id>
  <author>
    <name>Paul Vorbach</name>
  </author>
  <rights>© 2008-2013 Paul Vorbach</rights>
  <link href="https://vorb.de/log/"/>
  <link rel="self" href="https://vorb.de/log/feed.xml"/>
  <category term="computer"/>
  <category term="web"/>
  <category term="development"/>
  <icon>https://vorb.de/favicon.ico</icon>

  <entry>
    <title>File search in Node.js</title>
    <link href="https://vorb.de/log/2012/07/file-search-nodejs.html"/>
    <id>http://vorb.de/log/2012/07/file-search-nodejs.html</id>
    <updated>2012-07-12T10:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>https://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="https://vorb.de/log/2012/07/magnify.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Since the German blog post &lt;a href=&quot;https://vorb.de/log/2012/03/volltextsuche.html&quot;&gt;Volltextsuche&lt;/a&gt; is the most clicked on this blog, I’ll explain, how I realised the full-text search of this website with the help of Node.js.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You need to be on a Linux/Unix machine, since the search uses native command line commands like &lt;a href=&quot;http://en.wikipedia.org/wiki/Find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Grep&quot;&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/a&gt; and you need to have &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; (v0.4.0+) installed. Maybe there is a similar way to do it on Windows, too. I think you could install &lt;a href=&quot;http://git-scm.com/download&quot;&gt;Git for Windows&lt;/a&gt; and add the &lt;code&gt;/bin&lt;/code&gt; directory to your system &lt;code&gt;PATH&lt;/code&gt; to use the same commands on Windows. If somebody has a better solution (maybe one that works out of the box) he/she may &lt;a href=&quot;https://vorb.de/log/2012/07/file-search-nodejs.html#comments&quot;&gt;leave a comment&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;finding-files-on-the-command-line&quot;&gt;Finding files on the command line&lt;/h2&gt;
&lt;p&gt;If you are in a Unix shell, you don’t have a nifty search box, that lets you search for files in your current working directory. Instead, you have the command &lt;code&gt;find&lt;/code&gt;, that lets you search for files by specifying various arguments.&lt;/p&gt;
&lt;p&gt;For example with &lt;code&gt;find . -name '*.txt'&lt;/code&gt; you can search for all files (or directories) ending in &lt;code&gt;.txt&lt;/code&gt; in the current working directory and in any subdirectories.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But how would you search for the contents of a file?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is quite a bit more difficult to find out. There’s another command, &lt;code&gt;grep&lt;/code&gt;, that allows you to filter lines from &lt;code&gt;stdin&lt;/code&gt; or from the contents of a given file.&lt;/p&gt;
&lt;p&gt;Usually, Unix shells allow you to use the pipe character &lt;code&gt;|&lt;/code&gt; to combine commands. This way, you can use &lt;code&gt;find&lt;/code&gt; to first find all files of a specific type and the to filter out all the files that contain a specific search string, as follows:&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;.&lt;/span&gt; -name &lt;span class=&quot;st&quot;&gt;&amp;#39;*.html&amp;#39;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;xargs&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;example&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The command &lt;code&gt;xargs&lt;/code&gt; makes sure, that the results of find are used as arguments for grep, so that it reads the contents of each file. As a result, the command returns a line seperated list of HTML files, that contain the string “example”.&lt;/p&gt;
&lt;p&gt;To improve results and prevent errors, the command can still be improved.&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;.&lt;/span&gt; -iname &lt;span class=&quot;st&quot;&gt;&amp;#39;*.html&amp;#39;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;xargs&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;example&amp;#39;&lt;/span&gt; -isl&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, it doesn’t matter if file names are upper- or lowercase and the text search is also case insensitive. Binary content is ignored and warnings will be suppressed.&lt;/p&gt;
&lt;h2 id=&quot;the-basic-code&quot;&gt;The basic code&lt;/h2&gt;
&lt;p&gt;Let’s have a look at the required JavaScript code.&lt;/p&gt;
&lt;p&gt;What you need to write is a simple HTTP server, that parses the query part of the URL from a HTTP GET request. The search module only takes one parameter, &lt;code&gt;s&lt;/code&gt;, like in &lt;code&gt;http://vorb.de/search.html?s=example&lt;/code&gt;. This website (vorb.de) uses a small REST framework of mine, &lt;a href=&quot;https://github.com/pvorb/node-api&quot;&gt;api&lt;/a&gt;, which enables me to register modules for different URLs, but I’ll only show how to do it without any framework. This way you can adapt the solution to your framework of choice (&lt;a href=&quot;http://expressjs.com/&quot;&gt;express&lt;/a&gt;, &lt;a href=&quot;http://flatironjs.org/&quot;&gt;flatiron&lt;/a&gt;, &lt;a href=&quot;https://github.com/joyent/node/wiki/Modules#wiki-web-frameworks-full&quot;&gt;etc.&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You need to load several packages during start-up:&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; http = require(&lt;span class=&quot;ch&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; url = require(&lt;span class=&quot;ch&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; exec = require(&lt;span class=&quot;ch&quot;&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;exec&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, define some other values:&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// timeout in ms for a single search&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; timeout = &lt;span class=&quot;dv&quot;&gt;10000&lt;/span&gt;;
&lt;span class=&quot;co&quot;&gt;// specify the root directory, where the search will begin&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; root = &lt;span class=&quot;kw&quot;&gt;process&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;cwd&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can write the server code:&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; server = &lt;span class=&quot;kw&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createServer&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (req, resp) {
  &lt;span class=&quot;co&quot;&gt;// parse the request url&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// the query is everything after the &amp;#39;?&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// the second param says that the query shall be evaluated&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; query = &lt;span class=&quot;kw&quot;&gt;url&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;req&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;url&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;;

  &lt;span class=&quot;co&quot;&gt;// ensure both are != null or &amp;#39;&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (query &amp;amp;&amp;amp; &lt;span class=&quot;kw&quot;&gt;query&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;s&lt;/span&gt;) {
    &lt;span class=&quot;co&quot;&gt;// replace single with double quotes&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;query&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;s&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;query.s&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;ch&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;);

    &lt;span class=&quot;co&quot;&gt;// run the search&lt;/span&gt;
    exec(&lt;span class=&quot;st&quot;&gt;&amp;quot;find . -iname &amp;#39;*html&amp;#39; | xargs grep &amp;#39;&amp;quot;&lt;/span&gt;+query+
        &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;#39; -isl&amp;quot;&lt;/span&gt;, {
          &lt;span class=&quot;dt&quot;&gt;timeout&lt;/span&gt;: timeout,
          &lt;span class=&quot;dt&quot;&gt;cwd&lt;/span&gt;: root
        }, &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (err, stdout, stdin) {

      &lt;span class=&quot;kw&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;writeHead&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;, { &lt;span class=&quot;ch&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;: &lt;span class=&quot;ch&quot;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt; });

      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (err) {
        &lt;span class=&quot;kw&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;Error on search&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(err);
      }

      &lt;span class=&quot;co&quot;&gt;// split the results&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; results = &lt;span class=&quot;kw&quot;&gt;stdout&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);
      &lt;span class=&quot;co&quot;&gt;// remove last element (it’s an empty line)&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;results&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;pop&lt;/span&gt;();

      &lt;span class=&quot;kw&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;&amp;lt;h1&amp;gt;Search results&amp;lt;/h1&amp;gt;\n&amp;lt;ul&amp;gt;&amp;#39;&lt;/span&gt;);
      &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;kw&quot;&gt;results&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;; i++) {
        &lt;span class=&quot;kw&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(results[i]);
        &lt;span class=&quot;kw&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;&amp;lt;/li&amp;gt;&amp;#39;&lt;/span&gt;);
      }
      &lt;span class=&quot;kw&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;&amp;lt;/ul&amp;gt;&amp;#39;&lt;/span&gt;);
    });
  } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;writeHead&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;, { &lt;span class=&quot;ch&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;: &lt;span class=&quot;ch&quot;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt; });
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;resp&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;No results&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;);
  }
});

&lt;span class=&quot;co&quot;&gt;// listen on port 8080&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;listen&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () {
  &lt;span class=&quot;kw&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;Server running at http://localhost:8080/&amp;#39;&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may &lt;a href=&quot;https://vorb.de\log\2012\07\file-search.js&quot;&gt;download the source file&lt;/a&gt;. You can start it on the command line with &lt;code&gt;node file-search.js&lt;/code&gt;. Then go to &lt;a href=&quot;http://localhost:8080/?s=test&quot;&gt;localhost:8080&lt;/a&gt; try it. Of course you need to create some HTML files first, if you want to find something.&lt;/p&gt;
&lt;p&gt;Here’s how the result will look like:&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;https://vorb.de\log\2012\07\search-results.png&quot; alt=&quot;Screenshot of the search results page&quot; /&gt;&lt;p class=&quot;caption&quot;&gt;Screenshot of the search results page&lt;/p&gt;
&lt;/div&gt;

    </content>

    <category term="english"/>

    <category term="dev"/>

    <category term="nodejs"/>

  </entry>

  <entry>
    <title>Gitit</title>
    <link href="https://vorb.de/log/2012/07/gitit.html"/>
    <id>http://vorb.de/log/2012/07/gitit.html</id>
    <updated>2012-07-21T22:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>https://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="https://vorb.de/log/2012/07/gitit.png"&gt;&lt;/p&gt;

      &lt;p&gt;Vor einiger Zeit (vermutlich im Zusammenhang mit &lt;a href=&quot;https://vorb.de/log/2012/04/pandoc.html&quot;&gt;Pandoc&lt;/a&gt;) bin ich über die Wiki-Software &lt;a href=&quot;https://github.com/jgm/gitit/&quot;&gt;Gitit&lt;/a&gt; gestolpert. Gitit ist – genau wie Pandoc – in Haskell geschrieben und verwendet Git zur Versionierung der einzelnen Artikel. Außerdem wird Pandoc zum Übersetzen der Texte verwendet, sodass man zahlreiche Markup-Sprachen wie Markdown oder LaTeX verwenden kann. Der eine oder andere wird das schon von den Github-Wikis kennen.&lt;/p&gt;
&lt;p&gt;Ich hatte schon lange den Wunsch, ein Wiki für persönliche Notizen zu haben. Also habe ich mir heute die Zeit genommen und Gitit &lt;a href=&quot;https://wiki.vorb.de/&quot;&gt;aufgesetzt&lt;/a&gt;. Unter Debian ist das eine Aufgabe von 10 Minuten. Hier habe ich vor, ab und zu mal ein paar Notizen zu dem ein oder anderen Projekt aufzuschreiben oder schon ein paar Gedanken für Artikel aufzuschreiben. Vielleicht wird auch mehr daraus.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="wiki"/>

    <category term="haskell"/>

    <category term="pandoc"/>

    <category term="markdown"/>

    <category term="github"/>

  </entry>

  <entry>
    <title>HTTPS</title>
    <link href="https://vorb.de/log/2012/07/https.html"/>
    <id>http://vorb.de/log/2012/07/https.html</id>
    <updated>2012-07-22T22:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>https://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="https://vorb.de/log/2012/07/lock.png"&gt;&lt;/p&gt;

      &lt;p&gt;Man sollte wo es geht über verschlüsselte Verbindungen im Netz unterwegs sein. Das macht auch vor dem eigenen Blog nicht halt und so habe ich mir gestern ein paar SSL-Zertifikate erzeugt und diese bei &lt;a href=&quot;https://startssl.com/&quot;&gt;StartSSL&lt;/a&gt; registriert. Das ist nämlich der einzige mir bekannte Anbieter für SSL-Zertifikate, der auch kostenlose Zertifikate anbietet. Anderswo kosten einjährige Zertifikate zwischen 20 und 500 Euro, je nachdem bei wem man bestellt und wie viele Subdomains man gerne schützen möchte. Für eine Firma ist das in der Regel kein Problem, für einen Studenten jedoch schon.&lt;/p&gt;
&lt;p&gt;Prinzipiell ist es auch möglich, seine eigene &lt;a href=&quot;http://en.wikipedia.org/wiki/Certificate_authority&quot;&gt;Zertifizierungsstelle (CA)&lt;/a&gt; &lt;a href=&quot;http://workaround.org/certificate-authority&quot;&gt;zu eröffnen&lt;/a&gt;. Das ist in meinen Augen sogar sicherer als die gängige Methode, sich Zertifikate bei VeriSign &amp;amp; Co. zu besorgen. Schließlich ist keine dritte Instanz vorhanden, die die Möglichkeit hat, verschlüsselte Nachrichten zu entschlüsseln, weil sie die Schlüssel kennt. Leider ist die Mehrheit der Menschen (insbesondere aller Browser-Hersteller) anderer Meinung und so macht eine eigene CA zu viele Probleme mit verschiedenen Browsern.&lt;/p&gt;
&lt;p&gt;Es gäbe da auch noch die gemeinnützige &lt;a href=&quot;http://www.cacert.org/&quot;&gt;CAcert&lt;/a&gt;, aber die hat die gleichen Probleme wie eine eigene CA. Daher die Lösung mit StartSSL.&lt;/p&gt;
&lt;p&gt;Hier eine Übersicht über die verschiedenen Subdomains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vorb.de/&quot;&gt;http(s)://vorb.de&lt;/a&gt; (HTTPS optional)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://repo.vorb.de/&quot;&gt;http(s)://repo.vorb.de&lt;/a&gt; (HTTPS optional)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.vorb.de/&quot;&gt;https://wiki.vorb.de&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vorerst bleiben das Blog und das Software-Repository sowohl über HTTP als auch HTTPS erreichbar. Ich habe vor, in einem Monat dann alle Requests auf HTTPS umzuleiten, wenn bis dahin keine Probleme auftreten.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="cryptography"/>

    <category term="ssl"/>

  </entry>

  <entry>
    <title>Opinions</title>
    <link href="https://vorb.de/log/2012/08/opinions.html"/>
    <id>http://vorb.de/log/2012/08/opinions.html</id>
    <updated>2012-08-07T22:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>https://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="https://vorb.de/log/2012/08/talk.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Die Kommentarfunktion hier läuft überraschend gut. Per JavaScript wird für jeden Artikel ein Request gestartet, der die Kommentare als JSON-Dokument zurückliefert. Dieses wird anschließend geparst und ins HTML eingebaut, sodass die Kommentare angezeigt werden können. Im Prinzip wie bei &lt;a href=&quot;http://disqus.com/&quot;&gt;Disqus&lt;/a&gt; mit dem Unterschied, dass die Kommentare nicht bei einem anderen Dienst landen. Sogar Pingbacks funktionieren.&lt;/p&gt;
&lt;p&gt;Den Code dazu kann man sich im zugehörigen &lt;a href=&quot;https://github.com/pvorb/node-comments&quot;&gt;Github-Repository&lt;/a&gt; anschauen&lt;sup&gt;&lt;a href=&quot;https://vorb.de/log/2012/08/opinions.html#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Trotzdem bin ich mit der Kommentarfunktion, wie sie jetzt ist, unzufrieden. Der Grund dafür liegt in der Verwendung der Datenbank. Durch die Verwendung von MongoDB als Datenspeicher liegen die Kommentare zu den Artikeln nicht im Git-Repository des Blogs und werden dadurch auch nicht versioniert. Für Backups muss ich separat sorgen.&lt;/p&gt;
&lt;p&gt;In den nächsten Tagen werde ich versuchen, ein neues Kommentar-Modul für das Blog zu schreiben, welches die Kommentare in Git versioniert. Der Aufbau ist recht einfach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sobald ein Nutzer einen Kommentar über das Web-Interface anlegt, wird er in eine Kommentar-Datei zum jeweiligen Artikel geschrieben.&lt;/li&gt;
&lt;li&gt;Anschließend wird ein &lt;code&gt;git commit&lt;/code&gt; durchgeführt, der die Datei unter Versionskontrolle stellt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ein Problem stellt sich dabei jedoch:&lt;/p&gt;
&lt;p&gt;Was geschieht, wenn zufällig zwei Nutzer mehr oder weniger gleichzeitig einen neuen Kommentar abschicken? Ein Kommentar könnte verloren gehen, wenn von zwei Seiten aus versucht wird, die Datei zu verändern.&lt;/p&gt;
&lt;p&gt;Dazu bräuchte ich wohl eine Warteschlange auf dem Server, die sicherstellt, dass mehrere Kommentare immer korrekt verarbeitet werden. Mal sehen, ob das so gut funktioniert, wie ich mir das vorstelle.&lt;/p&gt;
&lt;p&gt;Dann will ich mich mal ans Werk machen. Die Entwicklung kann selbstverständlich &lt;a href=&quot;https://github.com/pvorb/node-opinions&quot;&gt;bei Github&lt;/a&gt; verfolgt werden.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Der Kitt zwischen dem Node.js-Modul und dem Server-Backend ist &lt;a href=&quot;https://github.com/vorbach/vorb.de/blob/master/.conf/modules/comments.js&quot;&gt;hier&lt;/a&gt; zu finden.&lt;a href=&quot;https://vorb.de/log/2012/08/opinions.html#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

    </content>

    <category term="deutsch"/>

    <category term="dev"/>

    <category term="nodejs"/>

  </entry>

  <entry>
    <title>Größe zeigen</title>
    <link href="https://vorb.de/log/2012/12/groesse-zeigen.html"/>
    <id>http://vorb.de/log/2012/12/groesse-zeigen.html</id>
    <updated>2012-12-08T00:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>https://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="https://vorb.de/log/2012/12/font-sizes.png"&gt;&lt;/p&gt;

      &lt;p&gt;Vergangene Woche habe ich den Standard-Schriftgrad in meinem Browser auf 18 Pixel erhöht. Und was soll ich sagen? Viele Websites lassen sich dadurch viel bequemer lesen. Beispielsweise zeigen Wikipedia und Google Schrift mit 100% Schriftgröße an.&lt;/p&gt;
&lt;p&gt;Ich frage mich, wie man überhaupt auf die Idee kommen kann, etwas anderes als die Default-Schriftgröße für Fließtext zu verwenden. Webdesigner maßen sich oft an, besser zu wissen, welchen Schriftgrad seine Besucher am besten lesen können.&lt;/p&gt;
&lt;p&gt;Die &lt;em&gt;Information Architects&lt;/em&gt; hingegen empfehlen schon seit 2006, &lt;a href=&quot;http://informationarchitects.net/blog/100e2r/&quot;&gt;die Schriftgröße bei 100% zu belassen&lt;/a&gt;. Seit einem halben Jahr &lt;a href=&quot;http://informationarchitects.net/blog/responsive-typography-the-basics/&quot;&gt;übertreibt man es mit der Schriftgröße jedoch etwas&lt;/a&gt;, wie ich finde.&lt;/p&gt;
&lt;p&gt;Für alle Seiten, die nicht genügend oder zu viel Größe zeigen, empfehle ich das Chrome-Plugin &lt;a href=&quot;https://github.com/ankit/stylebot&quot;&gt;Stylebot&lt;/a&gt; sowie &lt;a href=&quot;https://addons.mozilla.org/de/firefox/addon/stylish/&quot;&gt;Stylish&lt;/a&gt; für Firefox. Hiermit kann man Eigenarten im CSS für einzelne Websites ändern, die man öfter besucht.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="ux"/>

    <category term="typography"/>

  </entry>

  <entry>
    <title>Über Subpixel</title>
    <link href="https://vorb.de/log/2012/12/subpixel.html"/>
    <id>http://vorb.de/log/2012/12/subpixel.html</id>
    <updated>2012-12-08T02:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>https://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="https://vorb.de/log/2012/12/subpixel.png"&gt;&lt;/p&gt;

      &lt;p&gt;Zum Thema Subpixel-Rendering von Fonts auf Rasterbildschirmen ist vor kurzem &lt;a href=&quot;http://www.webkrauts.de/artikel/2012/techniken-zur-schriftglaettung-rasterizer&quot;&gt;ein Artikel&lt;/a&gt; im &lt;a href=&quot;http://www.webkrauts.de/serien/adventskalender/2012&quot;&gt;Webkrauts-Adventskalender&lt;/a&gt; erschienen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.webkrauts.de/comment/3748#comment-3748&quot;&gt;In einem Kommentar&lt;/a&gt; regt sich ein Leser darüber auf, dass das Beispielbild zur Subpixel-Glättung schlecht gewählt ist. Es wird nicht deutlich, dass die verschiedenen Farben bei üblichen Display-Panels horizontal nebeneinander angeordnet sind und durch diese Anordnung theoretisch die dreifache Auflösung erreicht werden kann.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;https://vorb.de/log/2012/12/raster-subpixel.png&quot; alt=&quot;Subpixel-Beispiel&quot; /&gt;&lt;p class=&quot;caption&quot;&gt;Subpixel-Beispiel&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Da es gar nicht so ohne weiteres Möglich ist, einen Screenshot so zu vergrößern, dass die Subpixel sichtbar werden, habe ich ein Programm dafür geschrieben: &lt;a href=&quot;https://github.com/pvorb/subpixel-illustrator&quot;&gt;Subpixel Illustrator&lt;/a&gt;. Damit lässt sich ein Screenshot im PNG-Format öffnen und vergrößern.&lt;/p&gt;
&lt;p&gt;Der Kern des Programms ist, dank Scala, recht kurz:&lt;/p&gt;
&lt;pre class=&quot;sourceCode scala&quot;&gt;&lt;code class=&quot;sourceCode scala&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;scaleUp&lt;/span&gt;(input: BufferedImage, factor: Int) = {
  &lt;span class=&quot;fu&quot;&gt;require&lt;/span&gt;(factor &amp;gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;factor not greater than one&amp;quot;&lt;/span&gt;)
  &lt;span class=&quot;fu&quot;&gt;require&lt;/span&gt;(factor % &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;st&quot;&gt;&amp;quot;factor not divisible by three&amp;quot;&lt;/span&gt;)

  &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; width = input.&lt;span class=&quot;fu&quot;&gt;getWidth&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; height = input.&lt;span class=&quot;fu&quot;&gt;getHeight&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; step = factor / &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;// Erzeuge leeres Bild mit `factor`-facher Größe&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; out = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; BufferedImage(input.&lt;span class=&quot;fu&quot;&gt;getWidth&lt;/span&gt; * factor,
    input.&lt;span class=&quot;fu&quot;&gt;getHeight&lt;/span&gt; * factor,
    BufferedImage.&lt;span class=&quot;fu&quot;&gt;TYPE_INT_RGB&lt;/span&gt;)

  &lt;span class=&quot;co&quot;&gt;// Durchlaufe das Bild Zeilenweise, von links nach&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// rechts&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; {
    _y &amp;lt;- &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; until height
    (yMin, yMax) = (_y * factor, (_y + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) * factor)
                              &lt;span class=&quot;co&quot;&gt;// Vergrößere Ausschnitt&lt;/span&gt;
    _x &amp;lt;- &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; until width
    (xMin, xMax) = (_x * factor, (_x + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) * factor)
                              &lt;span class=&quot;co&quot;&gt;// Vergrößere Ausschnitt&lt;/span&gt;
    _rgb = input.&lt;span class=&quot;fu&quot;&gt;getRGB&lt;/span&gt;(_x, _y)
                              &lt;span class=&quot;co&quot;&gt;// Lies RGB-Wert&lt;/span&gt;
    y &amp;lt;- yMin until yMax
    x &amp;lt;- xMin until xMax
    component = {
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (x &amp;lt; xMin + step) _rgb &amp;amp;&amp;amp; &lt;span class=&quot;bn&quot;&gt;0xFF0000&lt;/span&gt;
                              &lt;span class=&quot;co&quot;&gt;// Maskiere Rotanteil&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (xMax - step &amp;lt;= x) _rgb &amp;amp;&amp;amp; &lt;span class=&quot;bn&quot;&gt;0x0000FF&lt;/span&gt;
                              &lt;span class=&quot;co&quot;&gt;// Maskiere Blauanteil&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; _rgb &amp;amp;&amp;amp; &lt;span class=&quot;bn&quot;&gt;0x00FF00&lt;/span&gt;
                              &lt;span class=&quot;co&quot;&gt;// Maskiere Grünanteil&lt;/span&gt;
    }
  } {
    out.&lt;span class=&quot;fu&quot;&gt;setRGB&lt;/span&gt;(x, y, component)
                              &lt;span class=&quot;co&quot;&gt;// Setze neuen Farbwert&lt;/span&gt;
  }

  out
}&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;https://vorb.de/log/2012/12/raster-subpixel-improved.png&quot; alt=&quot;Das Ergebnis mit 15-facher Vergrößerung&quot; /&gt;&lt;p class=&quot;caption&quot;&gt;Das Ergebnis mit 15-facher Vergrößerung&lt;/p&gt;
&lt;/div&gt;

    </content>

    <category term="deutsch"/>

    <category term="ux"/>

    <category term="typography"/>

    <category term="dev"/>

    <category term="scala"/>

  </entry>

  <entry>
    <title>Binarisierung</title>
    <link href="https://vorb.de/log/2013/01/binarisierung.html"/>
    <id>http://vorb.de/log/2013/01/binarisierung.html</id>
    <updated>2013-01-21T23:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>https://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="https://vorb.de/log/2013/01/binarization.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;In meiner Bachelorarbeit, die den Titel „Erstellung von TrueType-Fonts zu historischen Manuskripten“ trägt, stand ich vor dem Problem, wie Zeichen in gescannten Manuskripten am besten erkannt werden können und wie sie in ein Vektorformat überführt werden können. Dazu hat es sich als hilfreich erwiesen, solche Scans zunächst in eine binarisierte Form zu bringen. Pixelmengen lassen sich sehr einfach gruppieren, wenn es nur schwarze und weiße Pixel gibt.&lt;/p&gt;
&lt;p&gt;Zunächst einmal kann man sich ohne Mühe einfache Verfahren ausdenken, die für jeden Pixel eines Bildes entscheiden, ob er schwarz oder weiß erscheinen soll. Das einfachste solche Verfahren ist, einen &lt;em&gt;festen Schwellwert&lt;/em&gt; zu verwenden, nach dem das Bild aufgeteilt wird. Ist die Farbe in einem Pixel heller, so wird der Pixel weiß gefärbt, ist der Pixel dunkler, so wird der Pixel schwarz gefärbt.&lt;/p&gt;
&lt;p&gt;Bei gescannten Dokumenten und besonders historischen Schriften steht man aber vor dem Problem, dass der Kontrast zwischen Schrift und Hintergrund (teilweise vergilbtes Papier oder Pergament) sehr klein werden können. Außerdem können einzelne Bildbereiche heller oder dunkler sein als andere. Deshalb lässt sich die Schrift mit einem festen Schwellwert nur noch sehr schlecht vom Hintergrund trennen.&lt;/p&gt;
&lt;p&gt;Für solche Fälle existieren &lt;em&gt;adaptive&lt;/em&gt; Verfahren, die jeweils nur die Umgebung um einen Pixel beim Ermitteln eines lokalen Schwellwerts betrachten. Diese Verfahren sind aber wesentlich aufwändiger als einfache Schwellwertverfahren. Leider existieren keine Programme, die &lt;em&gt;out of the box&lt;/em&gt; Bilder adaptiv binarisieren können.&lt;/p&gt;
&lt;p&gt;Diesen Umstand habe ich mir zum Anlass genommen, ein kleines Scala-Programm zu schreiben, das diesen Zweck erfüllt und mit einer kleinen GUI daherkommt. Zunächst einmal habe ich nur den &lt;a href=&quot;http://www.mediateam.oulu.fi/publications/pdf/24.p&quot;&gt;Binarisierungsalgorithmus nach Sauvola&lt;/a&gt; implementiert. Weitere Verfahren sollen folgen.&lt;/p&gt;
&lt;p&gt;Zur Installation benötigt man lediglich das &lt;em&gt;Java Runtime Environment (JRE) 6&lt;/em&gt; oder höher. Die &lt;a href=&quot;https://repo.vorb.de/downloads/image-binarization.jnlp&quot;&gt;Installation erfolgt über Java WebStart&lt;/a&gt;. Der Quelltext steht unter einer &lt;a href=&quot;https://vorb.de/license/mit.html&quot;&gt;MIT-Lizenz&lt;/a&gt; und ist bei &lt;a href=&quot;https://github.com/pvorb/image-binarization&quot;&gt;GitHub&lt;/a&gt; verfügbar.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="dev"/>

    <category term="scala"/>

    <category term="computer-vision"/>

    <category term="algorithm"/>

  </entry>

  <entry>
    <title>Flash Of No Content</title>
    <link href="https://vorb.de/log/2013/02/fonc.html"/>
    <id>http://vorb.de/log/2013/02/fonc.html</id>
    <updated>2013-02-06T23:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>https://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="https://vorb.de/log/2013/02/fonc-small.png"&gt;&lt;/p&gt;

      &lt;p&gt;Es ist noch gar nicht so lange her, da klagte man gerne mal über den &lt;em&gt;&lt;a href=&quot;https://www.webkit.org/blog/66/the-fouc-problem/&quot;&gt;Flash of Unstyled Content&lt;/a&gt; (FOUC)&lt;/em&gt;. Das bedeutet, beim erstmaligen Laden einer Webseite wurde der Inhalt für kurze Zeit ohne Formatierungen angezeigt. Vor allem, wenn das Stylsheet ein weiteres Stylesheet über ein &lt;code&gt;@import&lt;/code&gt;-Statement referenziert, war der FOUC zu beobachten. Durch immer schnellere DSL-Verbindungen und Verbesserungen der Darstellung im Browser ist der FOUC heute jedoch kein großes Problem mehr.&lt;/p&gt;
&lt;p&gt;Heute kann man &lt;a href=&quot;http://superuser.com/questions/547743/why-dont-websites-immediately-display-their-text-these-days&quot;&gt;einen anderen Effekt beobachten&lt;/a&gt;: Wenn eine Webseite Webfonts zur Darstellung von Text verwendet, zeigen Webkit-Browser keinen Text, bis die Font-Datei heruntergeladen, geparst und der Text gerendert wurde.&lt;/p&gt;
&lt;p&gt;Ich weiß ja nicht, ob dieser &lt;em&gt;Flash of No Content&lt;/em&gt; wirklich besser ist.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;https://vorb.de/log/2013/02/fonc.png&quot; alt=&quot;Der Flash of No Content auf PortableApps.com&quot; /&gt;&lt;p class=&quot;caption&quot;&gt;Der &lt;em&gt;Flash of No Content&lt;/em&gt; auf PortableApps.com&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Vielleicht sollte ich mal den Einsatz der &lt;em&gt;Open Sans&lt;/em&gt; für die Überschriften auf dieser Website überdenken…&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="ux"/>

    <category term="typography"/>

  </entry>

</feed>
