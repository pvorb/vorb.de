<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="de">
  <title>vorb.de</title>
  <subtitle>web, development and other things</subtitle>
  <updated>2012-04-19T16:05:19.821Z</updated>
  <id>http://vorb.de/log/feed.xml</id>
  <author>
    <name>Paul Vorbach</name>
  </author>
  <rights>© 2008-2011 Paul Vorbach</rights>
  <link href="http://vorb.de/log/"/>
  <link rel="self" href="http://vorb.de/log/feed.xml"/>
  <category term="computer"/>
  <category term="web"/>
  <category term="development"/>
  <icon>http://vorb.de/favicon.ico</icon>

  <entry>
    <title>Bread</title>
    <link href="http://vorb.de/log/2012/03/bread.html"/>
    <id>http://vorb.de/log/2012/03/bread.html</id>
    <updated>2012-03-07T17:20:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorb.de/log/2012/03/windmill.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;In diesem Artikel will ich &lt;a href=&quot;https://github.com/pvorb/node-bread&quot;&gt;Bread&lt;/a&gt; und was dazugehört auf technischer Ebene erläutern.&lt;/p&gt;
&lt;h2 id=&quot;statisches-html&quot;&gt;Statisches HTML&lt;/h2&gt;
&lt;p&gt;Prinzipiell war ja die Idee von ben_ nicht schlecht, &lt;a href=&quot;http://anmutunddemut.de/2010/05/18/the-anmut-of-static-html.html&quot;&gt;direkt statische HTML-Dateien zu schreiben&lt;/a&gt;. Ich habe das vor zirka einem Jahr schon mit &lt;a href=&quot;https://github.com/pvorb/php-yuki&quot;&gt;Yuki&lt;/a&gt; versucht, aber kaum zwei Wochen durchgehalten. Das Problem war, dass ich zunächst sowohl den Blog-Index als auch den Feed von Hand schreiben musste. Das macht einfach keinen Spaß und ich bewundere ben_ dafür, dass er das über ein Jahr so durchgehalten hat. (Auch wenn bei ihm zumindest der Feed automatisch generiert wurde.)&lt;/p&gt;
&lt;h2 id=&quot;markdown&quot;&gt;Markdown&lt;/h2&gt;
&lt;p&gt;Was das Schreiben angeht, habe ich mich dann für &lt;a href=&quot;http://konnexus.net/2010/10/blogracer&quot;&gt;Konstantins Ansatz&lt;/a&gt; mit &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; als Markup-Sprache entschieden. Markdown finde ich ganz vorzüglich zum Schreiben von allen möglichen Texten, weil es dem Schreiben nicht im Weg steht. Das scheinen in den letzten Jahren auch einige andere bemerkt zu haben und so ist Markdown an &lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot;&gt;allen&lt;/a&gt; &lt;a href=&quot;http://stackoverflow.com/editing-help&quot;&gt;möglichen&lt;/a&gt; &lt;a href=&quot;http://www.iawriter.com/&quot;&gt;Ecken&lt;/a&gt; &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;zu&lt;/a&gt; &lt;a href=&quot;https://github.com/millermedeiros/mdoc&quot;&gt;finden&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;umsetzung&quot;&gt;Umsetzung&lt;/h2&gt;
&lt;p&gt;Ich habe Bread für &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; geschrieben. Das hat mehrere Gründe:&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Node.js hat ein paar interessante Konzepte, die mir sofort eingeleuchtet haben, und die wirklich Sinn ergeben. Dazu vielleicht an anderer Stelle mehr.&lt;/li&gt;
&lt;li&gt;Node.js ist eine sehr schlanke Plattform. Da JavaScript einen kleinen Sprachkern hat, gibt es kaum unnötigen Balast.&lt;/li&gt;
&lt;li&gt;Node.js hat ein sehr komfortables Modulsystem. Für viele Dinge gibt es schon fertige Module, die einfach installiert und verwendet werden können. Außerdem kann man in JavaScript auf sehr einfache Weise sehr modular programmieren.&lt;/li&gt;
&lt;li&gt;Ich finde PHP auf Dauer ziemlich langweilig. Es ist auch immer nützlich, neues zu lernen.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Da es sich anbietet, JavaScript-Programme modular zu schreiben, besteht Bread selbst aus einigen kleineren Modulen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Zunächst sei einmal &lt;a href=&quot;https://github.com/pvorb/node-dive&quot;&gt;Dive&lt;/a&gt; genannt. Dive macht nichts anderes, als eine Ordnerstruktur zu durchlaufen und für jede Datei, die eine bestimmte Dateiendung hat, eine Aktion auszuführen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Darauf baut &lt;a href=&quot;https://github.com/pvorb/node-bake&quot;&gt;Bake&lt;/a&gt; auf. Bake definiert die von Dive ausgeführte Aktion so:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;„Wenn die Dateiendung &lt;code&gt;.txt&lt;/code&gt; ist, wandle den Text in HTML um und schreibe das Ergebnis in die zugehörige HTML-Datei.“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Zusätzlich werden Zusatzinformationen wie die Schlagwörter oder das Datum vom Anfang der Textdateien gelesen und in einer Datenbank (in meinem Fall &lt;a href=&quot;http://mongodb.org/&quot;&gt;MongoDB&lt;/a&gt;) abgelegt.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nachdem die Dateien alle Transformiert wurden, werden noch Index-Dateien und Tag-Seiten erstellt. Dafür wird die Datenbank verwendet. Hieraus können die benötigten Informationen auf einfache Weise bereitgestellt werden.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sowohl für das Generieren der Artikel als auch für die anderen HTML-Dateien werden &lt;a href=&quot;https://github.com/vorbach/vorb.de/tree/master/.conf/templates&quot;&gt;Templates&lt;/a&gt; mit &lt;a href=&quot;http://embeddedjs.com/&quot;&gt;embedded JavaScript&lt;/a&gt; verwendet, weil EJS die selben Prinzipien wie PHP verfolgt und ich PHP für die Template-Sprache schlechthin halte.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Das alles lässt sich mit dem &lt;a href=&quot;http://npmjs.org/&quot;&gt;Node package manager&lt;/a&gt; prima so zusammenklöppeln, dass man nur noch Node.js und MongoDB und installiert zu haben braucht. Dann kann man bread und alles was dazu gehört ganz bequem per Kommandozeile mit &lt;code&gt;npm install -g bread&lt;/code&gt; installieren.&lt;/p&gt;
&lt;p&gt;Anschließend braucht man nur noch in das Verzeichnis zu wechseln, das die Texte enthält und dann &lt;code&gt;bread&lt;/code&gt; zu starten. Das Programm holt sich die benötigten &lt;a href=&quot;https://github.com/vorbach/vorb.de/blob/master/.conf/bread.json&quot;&gt;Informationen zur Konfiguration&lt;/a&gt; aus dem &lt;a href=&quot;https://github.com/vorbach/vorb.de/tree/master/.conf&quot;&gt;Verzeichnis .conf/&lt;/a&gt; und legt sofort mit dem Übersetzen los.&lt;/p&gt;
&lt;p&gt;Hier mal beispielhaft, wie so ein Aufruf dann konkret ausschaut:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bread
Beginning to bake c:\Dev\Src\web\vorb.de\public.
  * c:\Dev\Src\web\vorb.de\public\info\contact.html written.
  * c:\Dev\Src\web\vorb.de\public\info\markdown.de.html written.
  * c:\Dev\Src\web\vorb.de\public\log\blogroll.html written.
  * c:\Dev\Src\web\vorb.de\public\license\mit.html written.
  * c:\Dev\Src\web\vorb.de\public\log\2012\02\node-and-npm-on-debian.html written.
  * c:\Dev\Src\web\vorb.de\public\log\2012\03\was-lange-waehrt.html written.
  * c:\Dev\Src\web\vorb.de\public\info\index.html written.
  * c:\Dev\Src\web\vorb.de\public\info\markdown.en.html written.
  * c:\Dev\Src\web\vorb.de\public\log\2012\02\beginning.html written.
  * c:\Dev\Src\web\vorb.de\public\log\subscription.html written.
  * c:\Dev\Src\web\vorb.de\public\log\2012\03\bread.html written.
Content files written.
Beginning to write index and tag files.
  * c:\Dev\Src\web\vorb.de\public\log\tag\index.html written.
  * c:\Dev\Src\web\vorb.de\public\log\feed.xml written.
  * c:\Dev\Src\web\vorb.de\public\index.html written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\linux.html written.
Tag files written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\weblog.html written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\misc.html written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\html.html written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\markdown.html written.
  * c:\Dev\Src\web\vorb.de\public\log\index.html written.
Index files written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\dev.html written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\cms.html written.
  * c:\Dev\Src\web\vorb.de\public\log\2011\index.html written.
  * c:\Dev\Src\web\vorb.de\public\log\2012\index.html written.
  * c:\Dev\Src\web\vorb.de\public\log\2012\03\index.html written.
  * c:\Dev\Src\web\vorb.de\public\log\2011\09\index.html written.
  * c:\Dev\Src\web\vorb.de\public\log\2012\02\index.html written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\deutsch.html written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\nodejs.html written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\bread.html written.
  * c:\Dev\Src\web\vorb.de\public\log\tag\english.html written.
Autoindex files written.
ok&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;vor--und-nachteile&quot;&gt;Vor- und Nachteile&lt;/h2&gt;
&lt;p&gt;Natürlich bringt das System seine Vor- und Nachteile mit sich.&lt;/p&gt;
&lt;h3 id=&quot;vorteile&quot;&gt;Vorteile&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;Komfort:&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Neue Artikel lassen sich einfach und schnell schreiben. Markdown eignet sich hervorragend genau für diesen Zweck.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Standortunabhängigkeit:&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Die HTML-Dateien lassen sich eins zu eins auf einen beliebigen Webserver übertragen. Damit kann man das Blog dann auf jedem Billig-Hoster veröffentlichen, solange dieser einen FTP-Zugang anbietet. Außerdem lassen sich, wie ben_ schon vor einer Ewigkeit erkannt hat, alle Dateien prima mit Git sichern und versionieren.&lt;/p&gt;
&lt;p&gt;Dass Node.js und MongoDB benötigt werden ist hierfür kein Problem. Die Website kann (und das wird von mir auch so betrieben) komplett auf dem Client generiert werden. Es reicht, die Resultate per FTP auf den Server zu schieben. Die MongoDB wird sowieso mit jedem Aufruf neugestartet und wird somit auch nicht auf dem Server benötigt.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Editor der Wahl:&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Web-Editoren sind Mist. Viel komfortabler lassen sich Texte mit den Tools schreiben, die man bei sich auf dem Rechner laufen lassen kann.&lt;/p&gt;
&lt;p&gt;Da mir leider der &lt;a href=&quot;http://www.iawriter.com/&quot;&gt;iAwriter&lt;/a&gt; wegen mangelnder Unterstützung für Windows noch verwehrt bleibt, kommt aktuell &lt;a href=&quot;http://vim.org/&quot;&gt;Vim&lt;/a&gt; zum Einsatz. Damit und mit der Kommandozeile lässt sich sehr komfortabel und schnell arbeiten.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&quot;nachteile&quot;&gt;Nachteile&lt;/h3&gt;
&lt;p&gt;Nachteile sehe ich im Moment in folgenden Bereichen:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Datenbank:&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Die Tatsache, dass ich eine Datenbank brauche, um die Inhalte so zu generieren wie ich sie brauche, stört mich. Das muss auch besser und einfacher gehen. Der Einsatz von MongoDB ist eher eine Notlösung.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Langer Übersetzungsprozess:&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Noch läuft der gesamte Übersetzungsprozess innerhalb von – mal schnell ausprobieren – weniger als zwei Sekunden ab. Fraglich ist jedoch, wie das aussieht, wenn ich erst mal mehrere hundert oder gar tausend Artikel geschrieben habe, sieht das aber anders aus. Dafür muss ich mir noch eine Lösung einfallen lassen.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Komplexität:&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Die vielen Module (und ich habe noch ein paar wichtige ausgelassen) führen zwangsläufig zu einer selbst erschaffenen Komplexität. Teilweise ist auch der Code selbst etwas kompliziert geworden, woran Node.js mit schuld ist. Da in Node.js sämtliche &lt;em&gt;I/O asynchron&lt;/em&gt; abläuft, benötigt man viele Closures, was schon mal zu sechs Schachtelungsebenen führen kann. Das ist suboptimal und für Laien schlecht zu verstehen.&lt;/p&gt;
&lt;p&gt;Da ich das meiste aber selbst geschrieben habe, komme ich recht gut mit dieser Komplexität klar. Schön wäre aber, wenn ich da in Zukunft einiges vereinfachen könnte.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&quot;was-noch-kommt&quot;&gt;Was noch kommt&lt;/h2&gt;
&lt;p&gt;Ein paar Sachen habe ich vorerst noch nicht beschrieben:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Veröffentlichen mit Git&lt;/li&gt;
&lt;li&gt;Kommentare und Pingbacks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Das soll aber nicht lange so bleiben. Wer nicht warten kann, kann sich auch gerne das &lt;a href=&quot;https://github.com/vorbach/vorb.de&quot;&gt;Repository zu dieser Website&lt;/a&gt; auf Github anschauen. Leider musste ich das in eine eigene &lt;em&gt;„Organization“&lt;/em&gt; auslagern, weil ich nicht mit dem 300 MB-Limit ausgekommen bin. ;)&lt;/p&gt;
&lt;h2 id=&quot;standing-on-the-shoulders-of-giants&quot;&gt;Standing on the shoulders of giants&lt;/h2&gt;
&lt;p&gt;Wie der &lt;a href=&quot;http://konnexus.net/2010/10/blogracer&quot;&gt;Blogracer&lt;/a&gt; steht auch Bread auf den Schultern von Giganten. Ich möchte mich bei &lt;a href=&quot;http://anmutunddemut.de/&quot;&gt;ben_&lt;/a&gt;, &lt;a href=&quot;http://konnexus.net/&quot;&gt;Konstantin&lt;/a&gt; und &lt;a href=&quot;http://blog.fymmie.de/&quot;&gt;Maurice&lt;/a&gt; sowie allen Kommentatoren auf den jeweiligen Blogs bedanken, die einige wertvolle Gedanken zu diesem Thema zusammengetragen haben.&lt;/p&gt;
&lt;p&gt;Wer sich für die Hintergründe interessiert, wird unter anderem hier fündig:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://anmutunddemut.de/thema/serie/on-my-way-to-heimweh&quot;&gt;On my way to heimweh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://konnexus.net/lexicon/blogracer&quot;&gt;Blogracer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.fymmie.de/thema/nihil&quot;&gt;Nihil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, jetzt muss ich mich aber mal zügeln. Das mag ja sonst keiner mehr lesen. Ich freue mich schon auf die Diskussion. &lt;em&gt;Was meint ihr dazu?&lt;/em&gt;&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="dev"/>

    <category term="nodejs"/>

    <category term="cms"/>

    <category term="bread"/>

    <category term="html"/>

    <category term="markdown"/>

  </entry>

  <entry>
    <title>Bread und Git</title>
    <link href="http://vorb.de/log/2012/03/bread-git.html"/>
    <id>http://vorb.de/log/2012/03/bread-git.html</id>
    <updated>2012-03-07T20:30:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorb.de/log/2012/03/fork.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Kommen wir zu einem wirklich schönen Teil, den Bread mitbringt. Und zwar veröffentlichen von Beiträgen mit Hilfe von &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;. Ich sollte vielleicht noch dazu sagen, dass das nicht direkt ein Bestandteil von Bread ist. Aber da man einfach nur Dateien auf den Server packt und keine Datenbank dazu braucht, ist das ziemlich leicht umzusetzen und &lt;em&gt;uuunendlich&lt;/em&gt; praktisch.&lt;/p&gt;
&lt;p&gt;So bediene ich meine Website nun schon seit mehreren Wochen immer mal wieder mit kleinen Updates, auch schon vor dem Blog. Wie ich bei der erneuten Lektüre der Heimweh-Artikel feststellen durfte, bin ich gar nicht selbst auf die Idee gekommen, das so zu machen. Das war &lt;a href=&quot;http://anmutunddemut.de/2010/05/23/heimweh-20-die-ziele.html#comment-7626&quot;&gt;schon 2010 fester Bestandteil von Heimweh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Das tut meiner Freude über dieses Feature aber keinen Abbruch.&lt;/p&gt;
&lt;p&gt;Folgender Arbeitsablauf ergibt sich beim Erstellen eines Artikels:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// In das richtige Verzeichnis wechseln oder bei Bedarf
// vorher anlegen:
$ cd public/log/YYYY/MM

$ cp $POST_DE_TPL neuer-artikel.txt
// wobei $POST_DE_TPL auf eine Textdatei mit dem
// grundlegenden Aufbau
// verweist

// Schreiben, was das Zeug hält
$ vim neuer-artikel.txt

// Teaser-Bild suchen, auf die richtige Größe bringen
// und im Verzeichnis ablegen
$ bread

// Alle Dateien aus dem Verzeichnis public/ hinzufügen
$ git add ../../..
$ git commit
$ git push web&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Und fertig. Also eigentlich kaum Aufwand.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="bread"/>

    <category term="git"/>

  </entry>

  <entry>
    <title>Volltextsuche</title>
    <link href="http://vorb.de/log/2012/03/volltextsuche.html"/>
    <id>http://vorb.de/log/2012/03/volltextsuche.html</id>
    <updated>2012-03-08T10:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorb.de/log/2012/03/hdd-search.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Hier fehlt noch eine Volltextsuche. Das ist aufgrund der Architektur von Bread nicht ganz trivial. Also habe ich mir überlegt, ob es vielleicht für den Moment ausreichen würde, das einfache UNIX-Kommando&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find . -iname &amp;#39;*.html&amp;#39; | xargs grep &amp;#39;suchterm&amp;#39; -sl&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dafür zu benutzen. Das durchsucht dann alle HTML-Dateien nach dem exakten Begriff und gibt eine Liste aus. Diese Liste könnte ich dann einfach so als dynamisch gerendertes HTML ausgeben.&lt;/p&gt;
&lt;p&gt;Ja, ich glaube, das versuche ich mal.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="dev"/>

    <category term="bread"/>

  </entry>

  <entry>
    <title>Node.js</title>
    <link href="http://vorb.de/log/2012/04/nodejs.html"/>
    <id>http://vorb.de/log/2012/04/nodejs.html</id>
    <updated>2012-04-12T23:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorb.de/log/2012/04/net.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Wie ich feststellen musste, lässt sich &lt;a href=&quot;http://vorb.de/log/2012/03/bread.html&quot;&gt;Bread&lt;/a&gt; kaum erklären, ohne ein paar Grundlagen zu Node.js gelegt zu haben. (Achtung: Hier geht’s ans Eingemachte!)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Node.js is a platform built on &lt;a href=&quot;http://code.google.com/p/v8/&quot;&gt;Chrome's JavaScript runtime&lt;/a&gt; for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So heißt es lapidar auf der &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js-Website&lt;/a&gt;. Über manche dieser Punkte lässt sich sicherlich streiten. Auf die wichtigsten will ich aber hier kurz eingehen und die Besonderheiten bzw. Unterschiede des neuen &lt;em&gt;Hicen Shice&lt;/em&gt; der Webentwicklung zu PHP und anderen Plattformen aufzeigen.&lt;/p&gt;
&lt;p&gt;Im Grunde ist Node.js eine Umgebung, mit der man JavaScript ohne einen Browser ausführen kann. Dabei kommt die &lt;a href=&quot;http://code.google.com/p/v8/&quot;&gt;V8-JavaScript-Engine&lt;/a&gt; zum Einsatz. Diese zeichnet sich dadurch aus, nicht gerade die langsamste Implementierung von JavaScript zu bieten. ;-)&lt;/p&gt;
&lt;p&gt;Es gab auch vorher zahlreiche andere Anwendungsmöglichkeiten für JavaScript außerhalb des Browsers. So wird es beispielsweise in Adobes Flash-Plattform unter dem Namen ActionScript genutzt oder auch zum Scripting verschiedener Programme, die eigentlich nichts mit JavaScript am Hut haben, zum Beispiel in &lt;a href=&quot;http://www.adobe.com/devnet/acrobat/javascript.html&quot;&gt;PDF&lt;/a&gt;, der &lt;a href=&quot;http://live.gnome.org/Gjs&quot;&gt;Gnome 3 Shell&lt;/a&gt; oder als Makrosprache in &lt;a href=&quot;http://www.openoffice.org/framework/scripting/release-0.2/javascript-devguide.html&quot;&gt;OpenOffice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;JavaScript ist anders als die meisten prozeduralen (und objektorientierten) Sprachen. Es sieht aus wie Java oder C, ist aber eher ein Lisp mit geschweiften Klammern. &lt;a href=&quot;http://www.crockford.com/javascript/javascript.html&quot;&gt;So sagt man zumindest.&lt;/a&gt; So sehr möchte ich aber gar nicht auf die Sprache eingehen. Eine gute Einführung in die Sprache gibt es &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Guide&quot;&gt;bei Mozilla&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Node.js bietet ein paar Erweiterungen der winzigen Standardbibliothek. Node enthält hauptsächlich zusätzliche Module für typische Netzwerk- oder Dateisystem-Aufgaben. Es lassen sich aber auch prima Konsolenprogramme mit aber auch ohne jegliche Netzwerk-Interaktion programmieren und mittlerweile gibt es auch &lt;a href=&quot;https://github.com/creationix/topcube&quot;&gt;Erweiterungen, die grafische Benutzeroberflächen ermöglichen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;unterschiede-zu-anderen-plattformen&quot;&gt;Unterschiede zu anderen Plattformen&lt;/h2&gt;
&lt;p&gt;Ein großer Unterschied zwischen Node und PHP ist, dass PHP entweder über FastCGI oder direkt als Apache-Modul immer einen einzelnen Request von einem einzelnen Browser vorgesetzt bekommt, den man dann nach Belieben verarbeiten und beantworten kann.&lt;/p&gt;
&lt;p&gt;Da Node.js nicht immer HTTP-Requests beantwortet, muss man sich einen solchen Webserver selbst schreiben. Dafür gibt es aber die nötigen Bibliotheken, die diese Aufgabe erheblich vereinfachen.&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; http = require(&lt;span class=&quot;ch&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; address = &lt;span class=&quot;ch&quot;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; port = &lt;span class=&quot;dv&quot;&gt;8080&lt;/span&gt;;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; server = &lt;span class=&quot;kw&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createServer&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; handle(req, resp) {
  &lt;span class=&quot;kw&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;Hallo Welt!&amp;#39;&lt;/span&gt;);
});

&lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;listen&lt;/span&gt;(port, address, &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () {
  &lt;span class=&quot;kw&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;ch&quot;&gt;&amp;#39;Server running at &amp;quot;http://&amp;#39;&lt;/span&gt; + address + &lt;span class=&quot;ch&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
      + port + &lt;span class=&quot;ch&quot;&gt;&amp;#39;/&amp;quot;.&amp;#39;&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Speichert man diese Zeilen Code in eine Datei namens &lt;code&gt;server.js&lt;/code&gt; und startet diese über die Kommandozeile mit &lt;code&gt;node server.js&lt;/code&gt;, so erhält man die Ausgabe &lt;code&gt;Server running at &amp;quot;http://localhost:8080/&amp;quot;.&lt;/code&gt; auf der Konsole. Ruft man nun im Browser die angegebene Adresse auf, so bekommt man „Hallo Welt!“ angezeigt.&lt;/p&gt;
&lt;p&gt;Das Server-Objekt aus dem Beispiel wartet auf eingehende HTTP-Verbindungen und führt jeweils die Funktion &lt;code&gt;handle&lt;/code&gt; aus. Diese bekommt über den Parameter &lt;code&gt;req&lt;/code&gt; (Request) die Informationen über den Request mitgeteilt.&lt;sup&gt;&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Das Objekt &lt;code&gt;resp&lt;/code&gt; (Response) ermöglicht dann das Antworten auf den Request mit den Methoden &lt;code&gt;writeHead&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt; und &lt;code&gt;end&lt;/code&gt; (u.a.).&lt;sup&gt;&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Das gleiche Programm lässt sich in PHP viel kürzer schreiben:&lt;/p&gt;
&lt;pre class=&quot;sourceCode PHP&quot;&gt;&lt;code class=&quot;sourceCode php&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;Hallo Welt!&amp;#39;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alles, was innerhalb der Funktion &lt;code&gt;handle&lt;/code&gt; steht, kann in der Regel auch mit PHP bewerkstelligt werden.&lt;/p&gt;
&lt;h2 id=&quot;vorteile&quot;&gt;Vorteile&lt;/h2&gt;
&lt;h3 id=&quot;asynchronizität&quot;&gt;Asynchronizität&lt;/h3&gt;
&lt;p&gt;(Furchtbares Wort.) Ein weiterer wichtiger Unterschied zu herkömmlichen Umgebungen ist die besondere Behandlung von Festplatten-, Datenbank- und Netzwerkzugriffen. Während PHP bei einer Datenbankabfrage (oder Festplattenzugriff oder Netzwerkrequest) solange nichts tut, bis die Datenbank (die Festplatte, das Netzwerk) entweder das Ergebnis oder einen Fehler liefert, blockieren solche „langsamen“ Operationen in Node den Programmablauf nicht. Das heißt, eine Datenbank-Query wird losgeschickt und eine Funktion registriert, die das Resultat verarbeitet. Anstatt zu warten, läuft das Programm danach jedoch weiter und der Callback erfolgt erst, wenn das Ergebnis da ist. Wo mehrere Zustände erreicht werden können, werden auch teilweise Event-Objekte und entsprechende Funktionen eingesetzt.&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(
  &lt;span class=&quot;ch&quot;&gt;&amp;#39;SELECT * FROM table&amp;#39;&lt;/span&gt;,
  &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; selected(err, results, fields) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (err)
      &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; err;

    &lt;span class=&quot;kw&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(results);
    &lt;span class=&quot;kw&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;log&lt;/span&gt;(fields);
    &lt;span class=&quot;kw&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;end&lt;/span&gt;();
  }
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dies steht im Gegensatz zu Apache/PHP, wo für jeden eingehenden Request ein neuer Thread erzeugt wird. Threads sind für diesen Zweck jedoch vergleichsweise ineffizient.&lt;sup&gt;&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fn3&quot; class=&quot;footnoteRef&quot; id=&quot;fnref3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; So kann PHP auf schwächeren Rechnern schon bei 10 bis 100 gleichzeitigen Zugriffen ins Straucheln kommen, während Node.js weit über 10.000 gleichzeigige Verbindungen abarbeiten kann.&lt;/p&gt;
&lt;p&gt;Für Python gibt es mit &lt;a href=&quot;http://twistedmatrix.com/&quot;&gt;Twisted&lt;/a&gt;, für Ruby mit &lt;a href=&quot;http://rubyeventmachine.com/&quot;&gt;Event Machine&lt;/a&gt; ähnliche Ansätze zur Programmierung schnellerer Webserver. Der Vorteil von Node liegt aber darin, dass JavaScript genau für Event-basierte Programmierung konzipiert wurde. Oberflächen (bzw. Benutzer, die diese bedienen) verhalten sich genauso, wie Netzwerke oder Festplatten: Man weiß nie, wann eine Aktion ausgeführt wird.&lt;/p&gt;
&lt;p&gt;Daher lässt sich in JavaScript sehr einfach und natürlich Event-basiert programmieren.&lt;/p&gt;
&lt;p&gt;Durch die Events lassen sich viele Dinge mehr oder weniger parallelisieren. Das trifft aber nur auf „ausgelagerte“ Aktionen zu. Man kann beispielsweise gleichzeitig mehrere Datenbankabfragen laufen lassen und eine Datei auslesen. Das Programm wird jedoch niemals mitten im Ablauf unterbrochen. Somit können keine &lt;a href=&quot;http://de.wikipedia.org/wiki/Race_Condition&quot;&gt;Race Conditions&lt;/a&gt; entstehen. Das macht die Programmierung wesentlich leichter überschaubar als mit Threads.&lt;sup&gt;&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fn4&quot; class=&quot;footnoteRef&quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Der Zustand der Objekte bleibt immer gewahrt.&lt;/p&gt;
&lt;p&gt;Wenn man den Programmablauf selbst parallelisieren möchte, muss man Teile des Programms als eigene Prozesse starten und dann mit Nachrichten (über &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_domain_socket&quot;&gt;Unix-Domain-Sockets&lt;/a&gt; oder &lt;a href=&quot;http://de.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;TCP-Verbindungen&lt;/a&gt;) synchron halten, ähnlich wie es im &lt;a href=&quot;http://en.wikipedia.org/wiki/Actor_model&quot;&gt;Aktor-Modell&lt;/a&gt; beschrieben wird. Das kann bei sehr rechenintensiven Programmen nötig werden. Meist reicht es aber, wenn lediglich asynchrone I/O verwendet wird. In Node lässt sich das Aktor-Modell umsetzen, ist aber nicht in die Plattform integriert wie beispielsweise in Erlang.&lt;/p&gt;
&lt;h3 id=&quot;paketsystem&quot;&gt;Paketsystem&lt;/h3&gt;
&lt;p&gt;Ich schrieb ja bereits, dass man mit JavaScript &lt;a href=&quot;http://vorb.de/log/2012/03/bread.html#umsetzung&quot;&gt;sehr modularen Code schreiben kann&lt;/a&gt;. Das erkläre ich mal am Beispiel von &lt;a href=&quot;https://github.com/pvorb/node-dive&quot;&gt;dive&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dive = require(&lt;span class=&quot;ch&quot;&gt;&amp;#39;dive&amp;#39;&lt;/span&gt;);

dive(&lt;span class=&quot;ch&quot;&gt;&amp;#39;/some/directory&amp;#39;&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; action(path) {
  &lt;span class=&quot;co&quot;&gt;// wird für jede Datei aufgerufen&lt;/span&gt;
}, &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; complete() {
  &lt;span class=&quot;co&quot;&gt;// wird aufgerufen nachdem alle Dateien durchlaufen wurden&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dive nimmt einen String mit einem absoluten Ordnerpfad entgegen, „taucht“ in dieses Verzeichnis ein und durchläuft alle Unterverzeichnisse und Dateien rekursiv. Für jede Datei wird dann der Callback &lt;code&gt;action&lt;/code&gt; ausgeführt. Nachdem alle Dateien durchlaufen wurden, wird &lt;code&gt;complete&lt;/code&gt; ausgeführt. That’s it. Mehr kann es nicht, ist aber trotzdem für viele Zwecke einsetzbar, weil man ja ganze Funktionen übergeben kann. Diese können dann ihrerseits beispielsweise nach dem Dateinamen filtern und so kann die Funktionalität verfeinert werden.&lt;/p&gt;
&lt;p&gt;Node.js verwendet das &lt;a href=&quot;http://wiki.commonjs.org/wiki/Packages/1.0&quot;&gt;CommonJS&lt;/a&gt;-Modulsystem und erlaubt es dadurch, solchen Code unkompliziert in Pakete zu verpacken. Für ein Paket benötigt man nur zwei Dateien. Eine Datei namens &lt;code&gt;package.json&lt;/code&gt; sowie das eigentliche Programm.&lt;/p&gt;
&lt;p&gt;Die Datei &lt;code&gt;package.json&lt;/code&gt; enthält Informationen über das Paket.&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;{
  &lt;span class=&quot;st&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;dive&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;st&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;walk through directory trees and apply an action to every file&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;st&quot;&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;: [ &lt;span class=&quot;st&quot;&gt;&amp;quot;recursive&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;file walking&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;directories&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;async&amp;quot;&lt;/span&gt; ],
  &lt;span class=&quot;st&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;Paul Vorbach &amp;lt;paul@vorb.de&amp;gt; (http://vorb.de)&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;st&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;0.2.0&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;st&quot;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;./dive.js&amp;quot;&lt;/span&gt;,
  &lt;span class=&quot;st&quot;&gt;&amp;quot;repository&amp;quot;&lt;/span&gt;: {
    &lt;span class=&quot;st&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;git&amp;quot;&lt;/span&gt;,
    &lt;span class=&quot;st&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;git://github.com/pvorb/node-dive.git&amp;quot;&lt;/span&gt;
  },
  &lt;span class=&quot;st&quot;&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;: {
    &lt;span class=&quot;st&quot;&gt;&amp;quot;append&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;gt;=0.1.1&amp;quot;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Im Quelltext kann man dann beliebige Teile des Codes „exportieren“. Sprich: Man kann der Variable &lt;code&gt;exports&lt;/code&gt; dann alle möglichen Werte zuweisen. Im Beispiel oben wurde einfach eine Funktion exportiert. Das sieht im Quelltext so aus:&lt;/p&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; dive(dir, action, complete) {
  &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;
}

exports = dive;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit &lt;a href=&quot;http://search.npmjs.org/&quot;&gt;Node Package Manager (npm)&lt;/a&gt; existiert außerdem ein Verzeichnis solcher Pakete. Über ein einfaches &lt;code&gt;npm install paketname&lt;/code&gt; lassen sich diese installieren und im Code dann, wie oben schon gesehen, über &lt;code&gt;var paketname = require('paketname');&lt;/code&gt; einbinden.&lt;/p&gt;
&lt;p&gt;Solch ein Paketsystem ist aber nichts neues, das gibt es für viele Programmierumgebungen.&lt;sup&gt;&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fn5&quot; class=&quot;footnoteRef&quot; id=&quot;fnref5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; Mit momentan über 8000 Paketen hat das Verzeichnis in nur knapp anderthalb Jahren eine stolze Größe erreicht.&lt;/p&gt;
&lt;h3 id=&quot;wiederverwendbarkeit&quot;&gt;Wiederverwendbarkeit&lt;/h3&gt;
&lt;p&gt;Der große Vorteil von JavaScript als serverseitiger Scriptsprache liegt in der Wiederverwendbarkeit der Pakete. Sie lassen sich sowohl in Node als auch im Browser verwenden. Über &lt;a href=&quot;http://ender.no.de/&quot;&gt;Ender&lt;/a&gt; lassen sich diese dann auch einfach zu Bibliotheken so zusammenstellen, wie man es gerade braucht. So könnte man zum Beispiel den Code, der Nutzereingaben validiert, sowohl auf dem Server als auch im Browser benutzen.&lt;/p&gt;
&lt;h2 id=&quot;nachteile&quot;&gt;Nachteile&lt;/h2&gt;
&lt;p&gt;Node ist alles andere als perfekt. Man sollte sich genau überlegen, ob es für ein bestimmtes Projekt geeignet ist, bevor man sich ins kühle Nass wirft.&lt;/p&gt;
&lt;h3 id=&quot;callback-hölle&quot;&gt;Callback-Hölle:&lt;/h3&gt;
&lt;p&gt;Wenn man viele asynchrone Dinge hintereinander ausführen möchte, kann das Programm schnell unübersichtlich werden. Für jeden Callback wird der Code in der Regel eine Ebene weiter eingerückt. Es gibt zwar Möglichkeiten, das zu umgehen, trotzdem muss man sich damit beschäftigen.&lt;/p&gt;
&lt;h3 id=&quot;kleine-standardbibliothek&quot;&gt;Kleine Standardbibliothek&lt;/h3&gt;
&lt;p&gt;Die kleine Standardbibliothek von JavaScript ist Segen und Fluch zugleich. Die Erweiterungen von Node helfen auch nur bei speziellen Problemen. An die Java Platform oder das .Net-Framework kommt die Funktionalität bei weitem nicht heran. Viele Dinge muss man entweder selbst schreiben oder aus den zahlreichen Paketen von npm zusammensuchen. Dann hat man aber häufig inkonsistente Schnittstellen und muss die benötigten Informationen an vielen verschiedenen Stellen nachlesen.&lt;/p&gt;
&lt;h3 id=&quot;parallelisierung&quot;&gt;Parallelisierung&lt;/h3&gt;
&lt;p&gt;Node.js bietet von sich aus keine Möglichkeiten zur echten Parallelisierung des Programmablaufs. Über das Aktor-Modell lässt sich Parallelisierung erreichen. Das ist jedoch aufwendig. Mit &lt;a href=&quot;http://fabricengine.com/&quot;&gt;FabricEngine&lt;/a&gt; soll es angeblich auch möglich sein, Programme für mehrere Threads zu optimieren.&lt;/p&gt;
&lt;h2 id=&quot;fazit&quot;&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Durch Node.js wird es wesentlich einfacher, schnelle und schlanke Programme zu schreiben. Es ist aber keine eierlegende Wollmilchsau. Es ist einfach ein Werkzeug, das für bestimmte Anwendungszwecke Sinn ergibt. Für viele Aufgaben, die bisher mit typischen Web-Frameworks wie &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; oder dem Klon in der jeweils bevorzugten Sprache gelöst werden, sind diese immer noch angebracht.&lt;/p&gt;
&lt;p&gt;Wer aber mit JavaScript gut klarkommt und bereit ist, seine Denkweise teilweise anzupassen, der findet mit Node.js eine Alternative, die durch die Asynchronizität und die Schnelligkeit von V8 einiges aus so manch alter Kiste herausholt. Die Plattform ist aber auf jeden Fall einen Blick wert.&lt;/p&gt;
&lt;h2 id=&quot;weiterführendes-material&quot;&gt;Weiterführendes Material&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=jo_B4LTHi3I&quot;&gt;Introduction to Node.js with Ryan Dahl&lt;/a&gt; (Einführungsvideo, Englisch)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodeguide.com/beginner.html&quot;&gt;Felix’s Node.js Beginners Guide&lt;/a&gt; (Tutorial, Englisch)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cre.fm/cre167&quot;&gt;CRE 167 node.js&lt;/a&gt; (Podcast, Deutsch)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://howtonode.org/&quot;&gt;How To Node&lt;/a&gt; (Blog/Tutorials, Englisch)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Vergleichbar mit den Variablen &lt;code&gt;$_GET&lt;/code&gt; und &lt;code&gt;$_POST&lt;/code&gt; in PHP.&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;In PHP wäre das alles, was nicht zwischen &lt;code&gt;&amp;lt;?php&lt;/code&gt; und &lt;code&gt;?&amp;gt;&lt;/code&gt; steht, oder die Ausgabe von Strings mit &lt;code&gt;echo&lt;/code&gt; und &lt;code&gt;print&lt;/code&gt;.&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;siehe das &lt;a href=&quot;http://www.kegel.com/c10k.html&quot;&gt;C10K-Problem&lt;/a&gt;.&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn4&quot;&gt;&lt;p&gt;Bei den gängigen Plattformen wie PHP, Python oder Ruby spielen Threads für den Programmierer keine Rolle. Bei Java und C# kann man jedoch echte Parallelität des Codes durch Threads erreichen und diese selbst kontrollieren.&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn5&quot;&gt;&lt;p&gt;siehe &lt;a href=&quot;http://www.cpan.org/&quot;&gt;CPAN&lt;/a&gt; (Perl; über 100.000 Pakete), &lt;a href=&quot;http://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt; (Ruby; über 37.000 Pakete), &lt;a href=&quot;http://pypi.python.org/pypi&quot;&gt;pypi&lt;/a&gt; (Pyhton; über 20.000 Pakete), &lt;a href=&quot;http://pear.php.net/&quot;&gt;PEAR&lt;/a&gt; (PHP; über 586 Pakete).&lt;a href=&quot;http://vorb.de/log/2012/04/nodejs.html#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

    </content>

    <category term="deutsch"/>

    <category term="dev"/>

    <category term="javascript"/>

    <category term="nodejs"/>

  </entry>

  <entry>
    <title>Semantic Weblog</title>
    <link href="http://vorb.de/log/2012/04/semantic-weblog.html"/>
    <id>http://vorb.de/log/2012/04/semantic-weblog.html</id>
    <updated>2012-04-17T13:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorb.de/log/2012/04/green-roof-norway.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;Mit den &lt;a href=&quot;http://vorb.de/log/tag/&quot;&gt;Tag-Seiten&lt;/a&gt; kann Bread etwas, das ein wenig in Richtung Semantic Weblog geht.&lt;/p&gt;
&lt;p&gt;Seit heute habe ich dann auch mal angefangen, ein paar Informationen in den Tag-Seiten zu den Themen dieses Blogs zu sammeln. Semantic Web geht eigentlich viel weiter. Ich glaube aber nicht, dass ich die Disziplin für ein formal standardisiertes Dokumentenformat wie &lt;a href=&quot;http://de.wikipedia.org/wiki/Web_Ontology_Language&quot;&gt;OWL&lt;/a&gt; oder &lt;a href=&quot;http://de.wikipedia.org/wiki/Resource_Description_Framework&quot;&gt;RDF&lt;/a&gt; habe. Die Tag-Seiten sollen eher etwas in Richtung von &lt;a href=&quot;http://konnexus.net/lexicon/&quot;&gt;Konstantins Lexikon&lt;/a&gt; werden.&lt;/p&gt;
&lt;p&gt;Einiges Interessantes im Bezug auf das &lt;em&gt;Semantic Web&lt;/em&gt; und &lt;em&gt;Semantig Weblogs&lt;/em&gt; im Speziellen &lt;a href=&quot;http://anmutunddemut.de/thema/semantic-weblog&quot;&gt;findet sich bei Anmut und Demut&lt;/a&gt;.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="bread"/>

    <category term="weblog"/>

    <category term="semantic-web"/>

  </entry>

  <entry>
    <title>git reset --soft HEAD^</title>
    <link href="http://vorb.de/log/2012/04/git-reset.html"/>
    <id>http://vorb.de/log/2012/04/git-reset.html</id>
    <updated>2012-04-17T13:14:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorb.de/log/2012/04/reset.png"&gt;&lt;/p&gt;

      &lt;p&gt;Kurze Notiz an mich, weil ich es so oft brauche: Mit dem Kommando&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lässt sich der letzte Commit in einem Git-Repository rückgängig machen. Danach kann man den Commit ganz normal bearbeiten und anschließend wieder committen.&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;http://stackoverflow.com/questions/927358/git-undo-last-commit&quot;&gt;via StackOverflow&lt;/a&gt;)&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="note"/>

    <category term="git"/>

    <category term="dev"/>

  </entry>

  <entry>
    <title>Pandoc</title>
    <link href="http://vorb.de/log/2012/04/pandoc.html"/>
    <id>http://vorb.de/log/2012/04/pandoc.html</id>
    <updated>2012-04-18T20:05:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorb.de/log/2012/04/pinned-docs.jpg"&gt;&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;Pandoc&lt;/a&gt; ist ein Haskell-Programm zur Konvertierung von Dokumenten für die Konsole. Damit lassen sich verschiedene Markup-Sprachen in andere Markup-Sprachen oder Dokumentformate umwandeln.&lt;/p&gt;
&lt;p&gt;Vorrangig unterstützt Pandoc als Eingabe-Format das allseits beliebte Markdown. Daraus lassen sich dann beispielsweise HTML- oder LaTeX-Dokumente erzeugen, genauso leicht aber auch PDF- oder Word-Dokumente und sogar E-books im EPUB-Format.&lt;/p&gt;
&lt;p&gt;Viele werden sagen, dass das wieder nur ein weiteres Tool ist, das kein Mensch braucht. Es mag sein, dass das bei vielen zutrifft. Für micht bedeutet es aber, dass viele andere Programme überflüssig werden. Ich habe sogar meine Bachelorarbeit anstatt mit LaTeX mit Pandoc geschrieben. Mit Erfolg. Der Quellcode ist sehr viel angenehmer zu lesen.&lt;/p&gt;
&lt;p&gt;Damit Pandoc mit LaTeX mithalten kann, enthält Pandoc einige Erweiterungen zu Markdown wie zum Beispiel Tabellen, mathematische Formeln nach LaTeX-Manier und Fußnoten. Zudem kann man auch direkt HTML- und LaTeX-Blöcke in den Quelltext schreiben, wenn ein benötigtes Feature mal nicht zur Verfügung steht.&lt;/p&gt;
&lt;p&gt;Pandoc übernimmt außerdem die HTML-Generierung von Bread.&lt;/p&gt;
&lt;p&gt;Wer also schon mit Markdown arbeitet, sollte sich Pandoc einmal genauer ansehen.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="pandoc"/>

    <category term="haskell"/>

    <category term="markdown"/>

    <category term="html"/>

    <category term="tex"/>

    <category term="pdf"/>

    <category term="ms-word"/>

    <category term="e-book"/>

    <category term="epub"/>

    <category term="bread"/>

  </entry>

  <entry>
    <title>Minecraft: DOTA</title>
    <link href="http://vorb.de/log/2012/04/minecraft-dota.html"/>
    <id>http://vorb.de/log/2012/04/minecraft-dota.html</id>
    <updated>2012-04-19T15:00:00.000Z</updated>
    <author>
      <name>Paul Vorbach</name>
      <uri>http://vorb.de/</uri>
    </author>
    <content type="html">

      &lt;p&gt;&lt;img src="http://vorb.de/log/2012/04/minecraft-dota.png"&gt;&lt;/p&gt;

      &lt;p&gt;War ja nur eine Frage der Zeit:&lt;/p&gt;
&lt;iframe width=&quot;520&quot; height=&quot;320&quot; src=&quot;https://www.youtube.com/embed/xY5XpjmpR78&quot;
  frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;http://www.minecraftforum.net/topic/1161133-minecraft-dota/&quot;&gt;Das&lt;/a&gt; könnte spaßig werden.&lt;/p&gt;

    </content>

    <category term="deutsch"/>

    <category term="games"/>

    <category term="minecraft"/>

  </entry>

</feed>
